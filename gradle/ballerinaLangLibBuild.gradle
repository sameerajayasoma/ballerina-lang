/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

dependencies {
    implementation project(':ballerina-projects')
}

configurations {
    distributionBalo {
        transitive false
    }
}

class BallerinaLangLibBuildTask extends JavaExec {
    def projectDir = ''
    def distCache = ''
    def moduleName = project.name

    BallerinaLangLibBuildTask() {
        setMain('org.ballerinalang.stdlib.utils.BuildLangLib')
    }


    @Override
    void exec() {
        def args = []
        args << projectDir
        args << distCache

        super.setArgs(args)
        super.exec()
    }

    @Override
    JavaExec args(Object... args) {
        throw new UnsupportedOperationException()
    }

    @Override
    JavaExecSpec args(Iterable<?> args) {
        throw new UnsupportedOperationException()
    }

}

task createDistributionCache(type: Copy) {
    dependsOn configurations.distributionBalo
    from configurations.distributionBalo
    into "$buildDir/distribution-cache"
}

task ballerinaLangLibBuild(type: BallerinaLangLibBuildTask) {
    projectDir = project.buildDir.toString() + "/new-project/" + project.projectDir.name
    distCache = project.buildDir.toString()
    classpath = project.configurations.baloCreat
    dependsOn moduleTopackage
    dependsOn createDistributionCache
    outputs.files("$buildDir/new-project/" + project.projectDir.name + "/target/balo/")
    outputs.files("$buildDir/new-project/" + project.projectDir.name + "/target/jar_cache/")

    classpath += files(jar.archivePath)
}

artifacts {
    distributionBalo file("$buildDir/new-project/" + project.projectDir.name + "/target/balo/"), {
        builtBy(ballerinaLangLibBuild)
    }
}

build.dependsOn ballerinaLangLibBuild