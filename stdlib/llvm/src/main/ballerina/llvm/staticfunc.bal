// Copyright (c) 2018 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

public extern function LLVMLoadLibraryPermanently(string filename) returns int;
//public extern function LLVMLoadLibraryPermanently(BytePointer filename) returns int;
//public extern function LLVMParseCommandLineOptions(int argc, byte[] argv, BytePointer overview);
//public extern function LLVMParseCommandLineOptions(int argc, ByteBuffer argv, string overview);
//public extern function LLVMParseCommandLineOptions(int argc, BytePointer argv, string overview);
//public extern function LLVMParseCommandLineOptions(int argc, ByteBuffer argv, BytePointer overview);
//public extern function LLVMParseCommandLineOptions(int argc, byte[] argv, string overview);
//public extern function LLVMParseCommandLineOptions(int argc, PointerPointer argv, BytePointer overview);
//public extern function LLVMParseCommandLineOptions(int argc, BytePointer argv, BytePointer overview);
public extern function LLVMSearchForAddressOfSymbol(string symbolName) returns Pointer;
//public extern function LLVMSearchForAddressOfSymbol(BytePointer symbolName) returns Pointer;
public extern function LLVMAddSymbol(string symbolName, Pointer symbolValue);
//public extern function LLVMAddSymbol(BytePointer symbolName, Pointer symbolValue);
public extern function LLVMInitializeCore(LLVMPassRegistryRef r);
public extern function LLVMShutdown();
//public extern function LLVMCreateMessage(BytePointer message) returns BytePointer;
public extern function LLVMCreateMessage(string message) returns ByteBuffer;
//public extern function LLVMDisposeMessage(byte[] message);
//public extern function LLVMDisposeMessage(ByteBuffer message);
//public extern function LLVMDisposeMessage(BytePointer message);
public extern function LLVMContextCreate() returns LLVMContextRef;
public extern function LLVMGetGlobalContext() returns LLVMContextRef;
public extern function LLVMContextSetDiagnosticHandler(LLVMContextRef c, LLVMDiagnosticHandler handler, Pointer diagnosticContext);
public extern function LLVMContextGetDiagnosticHandler(LLVMContextRef c) returns LLVMDiagnosticHandler;
public extern function LLVMContextGetDiagnosticContext(LLVMContextRef c) returns Pointer;
public extern function LLVMContextSetYieldCallback(LLVMContextRef c, LLVMYieldCallback callback, Pointer opaqueHandle);
public extern function LLVMContextDispose(LLVMContextRef c);
public extern function LLVMGetDiagInfoDescription(LLVMDiagnosticInfoRef di) returns BytePointer;
public extern function LLVMGetDiagInfoSeverity(LLVMDiagnosticInfoRef di) returns int;
//public extern function LLVMGetMDKindIDInContext(LLVMContextRef c, BytePointer name, int sLen) returns int;
public extern function LLVMGetMDKindIDInContext(LLVMContextRef c, string name, int sLen) returns int;
//public extern function LLVMGetMDKindID(BytePointer name, int sLen) returns int;
public extern function LLVMGetMDKindID(string name, int sLen) returns int;
//public extern function LLVMGetEnumAttributeKindForName(BytePointer name, int sLen) returns int;
public extern function LLVMGetEnumAttributeKindForName(string name, int sLen) returns int;
public extern function LLVMGetLastEnumAttributeKind() returns int;
public extern function LLVMCreateEnumAttribute(LLVMContextRef c, int kindID, int val) returns LLVMAttributeRef;
public extern function LLVMGetEnumAttributeKind(LLVMAttributeRef a) returns int;
public extern function LLVMGetEnumAttributeValue(LLVMAttributeRef a) returns int;
public extern function LLVMCreateStringAttribute(LLVMContextRef c, string k, int kLength, string v, int vLength) returns LLVMAttributeRef;
//public extern function LLVMCreateStringAttribute(LLVMContextRef c, BytePointer k, int kLength, BytePointer v, int vLength) returns LLVMAttributeRef;
//public extern function LLVMGetStringAttributeKind(LLVMAttributeRef a, IntBuffer length) returns string;
//public extern function LLVMGetStringAttributeKind(LLVMAttributeRef a, int[] length) returns BytePointer;
//public extern function LLVMGetStringAttributeKind(LLVMAttributeRef a, IntPointer length) returns BytePointer;
//public extern function LLVMGetStringAttributeValue(LLVMAttributeRef a, int[] length) returns BytePointer;
//public extern function LLVMGetStringAttributeValue(LLVMAttributeRef a, IntBuffer length) returns string;
//public extern function LLVMGetStringAttributeValue(LLVMAttributeRef a, IntPointer length) returns BytePointer;
public extern function LLVMIsEnumAttribute(LLVMAttributeRef a) returns int;
public extern function LLVMIsStringAttribute(LLVMAttributeRef a) returns int;
public extern function LLVMModuleCreateWithName(string moduleID) returns LLVMModuleRef;
//public extern function LLVMModuleCreateWithName(BytePointer moduleID) returns LLVMModuleRef;
//public extern function LLVMModuleCreateWithNameInContext(BytePointer moduleID, LLVMContextRef c) returns LLVMModuleRef;
public extern function LLVMModuleCreateWithNameInContext(string moduleID, LLVMContextRef c) returns LLVMModuleRef;
public extern function LLVMCloneModule(LLVMModuleRef m) returns LLVMModuleRef;
public extern function LLVMDisposeModule(LLVMModuleRef m);
public extern function LLVMGetModuleIdentifier(LLVMModuleRef m, SizeTPointer len) returns BytePointer;
public extern function LLVMSetModuleIdentifier(LLVMModuleRef m, string ident, int len);
//public extern function LLVMSetModuleIdentifier(LLVMModuleRef m, BytePointer ident, int len);
public extern function LLVMGetDataLayoutStr(LLVMModuleRef m) returns BytePointer;
public extern function LLVMGetDataLayout(LLVMModuleRef m) returns BytePointer;
public extern function LLVMSetDataLayout(LLVMModuleRef m, string dataLayoutStr);
//public extern function LLVMSetDataLayout(LLVMModuleRef m, BytePointer dataLayoutStr);
public extern function LLVMGetTarget(LLVMModuleRef m) returns BytePointer;
public extern function LLVMSetTarget(LLVMModuleRef m, string triple);
//public extern function LLVMSetTarget(LLVMModuleRef m, BytePointer triple);
public extern function LLVMDumpModule(LLVMModuleRef m);
//public extern function LLVMPrintModuleToFile(LLVMModuleRef m, BytePointer filename, byte[] errorMessage) returns int;
//public extern function LLVMPrintModuleToFile(LLVMModuleRef m, string filename, ByteBuffer errorMessage) returns int;
//public extern function LLVMPrintModuleToFile(LLVMModuleRef m, string filename, BytePointer errorMessage) returns int;
//public extern function LLVMPrintModuleToFile(LLVMModuleRef m, BytePointer filename, ByteBuffer errorMessage) returns int;
//public extern function LLVMPrintModuleToFile(LLVMModuleRef m, string filename, byte[] errorMessage) returns int;
//public extern function LLVMPrintModuleToFile(LLVMModuleRef m, BytePointer filename, PointerPointer errorMessage) returns int;
//public extern function LLVMPrintModuleToFile(LLVMModuleRef m, BytePointer filename, BytePointer errorMessage) returns int;
public extern function LLVMPrintModuleToString(LLVMModuleRef m) returns BytePointer;
public extern function LLVMSetModuleInlineAsm(LLVMModuleRef m, string asm);
//public extern function LLVMSetModuleInlineAsm(LLVMModuleRef m, BytePointer asm);
public extern function LLVMGetModuleContext(LLVMModuleRef m) returns LLVMContextRef;
public extern function LLVMGetTypeByName(LLVMModuleRef m, string name) returns LLVMTypeRef;
//public extern function LLVMGetTypeByName(LLVMModuleRef m, BytePointer name) returns LLVMTypeRef;
//public extern function LLVMGetNamedMetadataNumOperands(LLVMModuleRef m, BytePointer name) returns int;
public extern function LLVMGetNamedMetadataNumOperands(LLVMModuleRef m, string name) returns int;
//public extern function LLVMGetNamedMetadataOperands(LLVMModuleRef m, BytePointer name, LLVMValueRef dest);
public extern function LLVMGetNamedMetadataOperands(LLVMModuleRef m, string name, PointerPointer dest);
public extern function LLVMAddNamedMetadataOperand(LLVMModuleRef m, string name, LLVMValueRef val);
//public extern function LLVMAddNamedMetadataOperand(LLVMModuleRef m, BytePointer name, LLVMValueRef val);
public extern function LLVMAddFunction(LLVMModuleRef m, string name, LLVMTypeRef functionTy) returns LLVMValueRef;
//public extern function LLVMAddFunction(LLVMModuleRef m, BytePointer name, LLVMTypeRef functionTy) returns LLVMValueRef;
//public extern function LLVMGetNamedFunction(LLVMModuleRef m, BytePointer name) returns LLVMValueRef;
public extern function LLVMGetNamedFunction(LLVMModuleRef m, string name) returns LLVMValueRef;
public extern function LLVMGetFirstFunction(LLVMModuleRef m) returns LLVMValueRef;
public extern function LLVMGetLastFunction(LLVMModuleRef m) returns LLVMValueRef;
public extern function LLVMGetNextFunction(LLVMValueRef fn) returns LLVMValueRef;
public extern function LLVMGetPreviousFunction(LLVMValueRef fn) returns LLVMValueRef;
public extern function LLVMGetTypeKind(LLVMTypeRef ty) returns int;
public extern function LLVMTypeIsSized(LLVMTypeRef ty) returns int;
public extern function LLVMGetTypeContext(LLVMTypeRef ty) returns LLVMContextRef;
public extern function LLVMPrintTypeToString(LLVMTypeRef val) returns BytePointer;
public extern function LLVMInt1TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMInt8TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMInt16TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMInt32TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMInt64TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMInt128TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMIntTypeInContext(LLVMContextRef c, int numBits) returns LLVMTypeRef;
public extern function LLVMInt1Type() returns LLVMTypeRef;
public extern function LLVMInt8Type() returns LLVMTypeRef;
public extern function LLVMInt16Type() returns LLVMTypeRef;
public extern function LLVMInt32Type() returns LLVMTypeRef;
public extern function LLVMInt64Type() returns LLVMTypeRef;
public extern function LLVMInt128Type() returns LLVMTypeRef;
public extern function LLVMIntType(int numBits) returns LLVMTypeRef;
public extern function LLVMGetIntTypeWidth(LLVMTypeRef integerTy) returns int;
public extern function LLVMHalfTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMFloatTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMDoubleTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMX86FP80TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMFP128TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMPPCFP128TypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMHalfType() returns LLVMTypeRef;
public extern function LLVMFloatType() returns LLVMTypeRef;
public extern function LLVMDoubleType() returns LLVMTypeRef;
public extern function LLVMX86FP80Type() returns LLVMTypeRef;
public extern function LLVMFP128Type() returns LLVMTypeRef;
public extern function LLVMPPCFP128Type() returns LLVMTypeRef;
public extern function LLVMFunctionType0(LLVMTypeRef returnType, LLVMTypeRef paramTypes, int paramCount, int isVarArg) returns LLVMTypeRef;
public extern function LLVMFunctionType1(LLVMTypeRef returnType, LLVMTypeRef[] paramTypes, int paramCount, int isVarArg) returns LLVMTypeRef;
public extern function LLVMIsFunctionVarArg(LLVMTypeRef functionTy) returns int;
public extern function LLVMGetReturnType(LLVMTypeRef functionTy) returns LLVMTypeRef;
public extern function LLVMCountParamTypes(LLVMTypeRef functionTy) returns int;
public extern function LLVMGetParamTypes0(LLVMTypeRef functionTy, PointerPointer dest);
public extern function LLVMGetParamTypes1(LLVMTypeRef functionTy, LLVMTypeRef dest);
public extern function LLVMStructTypeInContext0(LLVMContextRef c, LLVMTypeRef elementTypes, int elementCount, int packed) returns LLVMTypeRef;
public extern function LLVMStructTypeInContext1(LLVMContextRef c, PointerPointer elementTypes, int elementCount, int packed) returns LLVMTypeRef;
public extern function LLVMStructType0(PointerPointer elementTypes, int elementCount, int packed) returns LLVMTypeRef;
public extern function LLVMStructType1(LLVMTypeRef elementTypes, int elementCount, int packed) returns LLVMTypeRef;
//public extern function LLVMStructCreateNamed(LLVMContextRef c, BytePointer name) returns LLVMTypeRef;
public extern function LLVMStructCreateNamed(LLVMContextRef c, string name) returns LLVMTypeRef;
public extern function LLVMGetStructName(LLVMTypeRef ty) returns BytePointer;
public extern function LLVMStructSetBody0(LLVMTypeRef structTy, LLVMTypeRef elementTypes, int elementCount, int packed);
public extern function LLVMStructSetBody1(LLVMTypeRef structTy, PointerPointer elementTypes, int elementCount, int packed);
public extern function LLVMCountStructElementTypes(LLVMTypeRef structTy) returns int;
public extern function LLVMGetStructElementTypes0(LLVMTypeRef structTy, LLVMTypeRef dest);
public extern function LLVMGetStructElementTypes1(LLVMTypeRef structTy, PointerPointer dest);
public extern function LLVMStructGetTypeAtIndex(LLVMTypeRef structTy, int i) returns LLVMTypeRef;
public extern function LLVMIsPackedStruct(LLVMTypeRef structTy) returns int;
public extern function LLVMIsOpaqueStruct(LLVMTypeRef structTy) returns int;
public extern function LLVMGetElementType(LLVMTypeRef ty) returns LLVMTypeRef;
public extern function LLVMGetSubtypes0(LLVMTypeRef tp, PointerPointer arr);
public extern function LLVMGetSubtypes1(LLVMTypeRef tp, LLVMTypeRef arr);
public extern function LLVMGetNumContainedTypes(LLVMTypeRef tp) returns int;
public extern function LLVMArrayType(LLVMTypeRef elementType, int elementCount) returns LLVMTypeRef;
public extern function LLVMGetArrayLength(LLVMTypeRef arrayTy) returns int;
public extern function LLVMPointerType(LLVMTypeRef elementType, int addressSpace) returns LLVMTypeRef;
public extern function LLVMGetPointerAddressSpace(LLVMTypeRef pointerTy) returns int;
public extern function LLVMVectorType(LLVMTypeRef elementType, int elementCount) returns LLVMTypeRef;
public extern function LLVMGetVectorSize(LLVMTypeRef vectorTy) returns int;
public extern function LLVMVoidTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMLabelTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMX86MMXTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMTokenTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMMetadataTypeInContext(LLVMContextRef c) returns LLVMTypeRef;
public extern function LLVMVoidType() returns LLVMTypeRef;
public extern function LLVMLabelType() returns LLVMTypeRef;
public extern function LLVMX86MMXType() returns LLVMTypeRef;
public extern function LLVMTypeOf(LLVMValueRef val) returns LLVMTypeRef;
public extern function LLVMGetValueKind(LLVMValueRef val) returns int;
public extern function LLVMGetValueName(LLVMValueRef val) returns BytePointer;
//public extern function LLVMSetValueName(LLVMValueRef val, BytePointer name);
public extern function LLVMSetValueName(LLVMValueRef val, string name);
public extern function LLVMDumpValue(LLVMValueRef val);
public extern function LLVMPrintValueToString(LLVMValueRef val) returns BytePointer;
public extern function LLVMReplaceAllUsesWith(LLVMValueRef oldVal, LLVMValueRef newVal);
public extern function LLVMIsConstant(LLVMValueRef val) returns int;
public extern function LLVMIsUndef(LLVMValueRef val) returns int;
public extern function LLVMIsAArgument(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsABasicBlock(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAInlineAsm(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAUser(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstant(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsABlockAddress(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantAggregateZero(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantArray(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantDataSequential(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantDataArray(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantDataVector(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantExpr(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantFP(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantInt(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantPointerNull(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantStruct(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantTokenNone(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAConstantVector(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAGlobalValue(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAGlobalAlias(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAGlobalObject(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAFunction(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAGlobalVariable(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAUndefValue(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAInstruction(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsABinaryOperator(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsACallInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAIntrinsicInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsADbgInfoIntrinsic(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsADbgDeclareInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAMemIntrinsic(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAMemCpyInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAMemMoveInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAMemSetInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsACmpInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAFCmpInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAICmpInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAExtractElementInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAGetElementPtrInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAInsertElementInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAInsertValueInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsALandingPadInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAPHINode(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsASelectInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAShuffleVectorInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAStoreInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsATerminatorInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsABranchInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAIndirectBrInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAInvokeInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAReturnInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsASwitchInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAUnreachableInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAResumeInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsACleanupReturnInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsACatchReturnInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAFuncletPadInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsACatchPadInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsACleanupPadInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAUnaryInstruction(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAAllocaInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsACastInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAAddrSpaceCastInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsABitCastInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAFPExtInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAFPToSIInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAFPToUIInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAFPTruncInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAIntToPtrInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAPtrToIntInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsASExtInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsASIToFPInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsATruncInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAUIToFPInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAZExtInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAExtractValueInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsALoadInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAVAArgInst(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAMDNode(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMIsAMDString(LLVMValueRef val) returns LLVMValueRef;
public extern function LLVMGetFirstUse(LLVMValueRef val) returns LLVMUseRef;
public extern function LLVMGetNextUse(LLVMUseRef u) returns LLVMUseRef;
public extern function LLVMGetUser(LLVMUseRef u) returns LLVMValueRef;
public extern function LLVMGetUsedValue(LLVMUseRef u) returns LLVMValueRef;
public extern function LLVMGetOperand(LLVMValueRef val, int index) returns LLVMValueRef;
public extern function LLVMGetOperandUse(LLVMValueRef val, int index) returns LLVMUseRef;
public extern function LLVMSetOperand(LLVMValueRef user, int index, LLVMValueRef val);
public extern function LLVMGetNumOperands(LLVMValueRef val) returns int;
public extern function LLVMConstNull(LLVMTypeRef ty) returns LLVMValueRef;
public extern function LLVMConstAllOnes(LLVMTypeRef ty) returns LLVMValueRef;
public extern function LLVMGetUndef(LLVMTypeRef ty) returns LLVMValueRef;
public extern function LLVMIsNull(LLVMValueRef val) returns int;
public extern function LLVMConstPointerNull(LLVMTypeRef ty) returns LLVMValueRef;
public extern function LLVMConstInt(LLVMTypeRef intTy, int n, int signExtend) returns LLVMValueRef;
//public extern function LLVMConstIntOfArbitraryPrecision(LLVMTypeRef intTy, int numWords, LongPointer words) returns LLVMValueRef;
//public extern function LLVMConstIntOfArbitraryPrecision(LLVMTypeRef intTy, int numWords, LongBuffer words) returns LLVMValueRef;
//public extern function LLVMConstIntOfArbitraryPrecision(LLVMTypeRef intTy, int numWords, long[] words) returns LLVMValueRef;
//public extern function LLVMConstIntOfString(LLVMTypeRef intTy, BytePointer text, byte radix) returns LLVMValueRef;
//public extern function LLVMConstIntOfString(LLVMTypeRef intTy, string text, byte radix) returns LLVMValueRef;
//public extern function LLVMConstIntOfStringAndSize(LLVMTypeRef intTy, string text, int sLen, byte radix) returns LLVMValueRef;
//public extern function LLVMConstIntOfStringAndSize(LLVMTypeRef intTy, BytePointer text, int sLen, byte radix) returns LLVMValueRef;
//public extern function LLVMConstReal(LLVMTypeRef realTy, double n) returns LLVMValueRef;
public extern function LLVMConstRealOfString(LLVMTypeRef realTy, string text) returns LLVMValueRef;
//public extern function LLVMConstRealOfString(LLVMTypeRef realTy, BytePointer text) returns LLVMValueRef;
//public extern function LLVMConstRealOfStringAndSize(LLVMTypeRef realTy, BytePointer text, int sLen) returns LLVMValueRef;
public extern function LLVMConstRealOfStringAndSize(LLVMTypeRef realTy, string text, int sLen) returns LLVMValueRef;
public extern function LLVMConstIntGetZExtValue(LLVMValueRef constantVal) returns int;
public extern function LLVMConstIntGetSExtValue(LLVMValueRef constantVal) returns int;
//public extern function LLVMConstRealGetDouble(LLVMValueRef constantVal, IntPointer losesInfo) returns double;
//public extern function LLVMConstRealGetDouble(LLVMValueRef constantVal, int[] losesInfo) returns double;
//public extern function LLVMConstRealGetDouble(LLVMValueRef constantVal, IntBuffer losesInfo) returns double;
//public extern function LLVMConstStringInContext(LLVMContextRef c, BytePointer str, int length, int dontNullTerminate) returns LLVMValueRef;
public extern function LLVMConstStringInContext(LLVMContextRef c, string str, int length, int dontNullTerminate) returns LLVMValueRef;
//public extern function LLVMConstString(BytePointer str, int length, int dontNullTerminate) returns LLVMValueRef;
public extern function LLVMConstString(string str, int length, int dontNullTerminate) returns LLVMValueRef;
public extern function LLVMIsConstantString(LLVMValueRef c) returns int;
public extern function LLVMGetAsString(LLVMValueRef c, SizeTPointer length) returns BytePointer;
public extern function LLVMConstStructInContext0(LLVMContextRef c, LLVMValueRef constantVals, int count, int packed) returns LLVMValueRef;
public extern function LLVMConstStructInContext1(LLVMContextRef c, PointerPointer constantVals, int count, int packed) returns LLVMValueRef;
public extern function LLVMConstStruct0(LLVMValueRef constantVals, int count, int packed) returns LLVMValueRef;
public extern function LLVMConstStruct1(PointerPointer constantVals, int count, int packed) returns LLVMValueRef;
public extern function LLVMConstArray0(LLVMTypeRef elementTy, LLVMValueRef constantVals, int length) returns LLVMValueRef;
public extern function LLVMConstArray1(LLVMTypeRef elementTy, PointerPointer constantVals, int length) returns LLVMValueRef;
public extern function LLVMConstNamedStruct0(LLVMTypeRef structTy, PointerPointer constantVals, int count) returns LLVMValueRef;
public extern function LLVMConstNamedStruct1(LLVMTypeRef structTy, LLVMValueRef constantVals, int count) returns LLVMValueRef;
public extern function LLVMGetElementAsConstant(LLVMValueRef c, int idx) returns LLVMValueRef;
public extern function LLVMConstVector0(PointerPointer scalarConstantVals, int size) returns LLVMValueRef;
public extern function LLVMConstVector1(LLVMValueRef scalarConstantVals, int size) returns LLVMValueRef;
public extern function LLVMGetConstOpcode(LLVMValueRef constantVal) returns int;
public extern function LLVMAlignOf(LLVMTypeRef ty) returns LLVMValueRef;
public extern function LLVMSizeOf(LLVMTypeRef ty) returns LLVMValueRef;
public extern function LLVMConstNeg(LLVMValueRef constantVal) returns LLVMValueRef;
public extern function LLVMConstNSWNeg(LLVMValueRef constantVal) returns LLVMValueRef;
public extern function LLVMConstNUWNeg(LLVMValueRef constantVal) returns LLVMValueRef;
public extern function LLVMConstFNeg(LLVMValueRef constantVal) returns LLVMValueRef;
public extern function LLVMConstNot(LLVMValueRef constantVal) returns LLVMValueRef;
public extern function LLVMConstAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstNSWAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstNUWAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstFAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstNSWSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstNUWSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstFSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstNSWMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstNUWMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstFMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstUDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstExactUDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstSDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstExactSDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstFDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstURem(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstSRem(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstFRem(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstAnd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstOr(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstXor(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstICmp(int predicate, LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstFCmp(int predicate, LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstShl(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstLShr(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstAShr(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef;
public extern function LLVMConstGEP0(LLVMValueRef constantVal, LLVMValueRef constantIndices, int numIndices) returns LLVMValueRef;
public extern function LLVMConstGEP1(LLVMValueRef constantVal, PointerPointer constantIndices, int numIndices) returns LLVMValueRef;
public extern function LLVMConstInBoundsGEP0(LLVMValueRef constantVal, LLVMValueRef constantIndices, int numIndices) returns LLVMValueRef;
public extern function LLVMConstInBoundsGEP1(LLVMValueRef constantVal, PointerPointer constantIndices, int numIndices) returns LLVMValueRef;
public extern function LLVMConstTrunc(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstSExt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstZExt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstFPTrunc(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstFPExt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstUIToFP(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstSIToFP(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstFPToUI(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstFPToSI(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstPtrToInt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstIntToPtr(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstAddrSpaceCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstZExtOrBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstSExtOrBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstTruncOrBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstPointerCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstIntCast(LLVMValueRef constantVal, LLVMTypeRef toType, int isSigned) returns LLVMValueRef;
public extern function LLVMConstFPCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef;
public extern function LLVMConstSelect(LLVMValueRef constantCondition, LLVMValueRef constantIfTrue, LLVMValueRef constantIfFalse) returns LLVMValueRef;
public extern function LLVMConstExtractElement(LLVMValueRef vectorConstant, LLVMValueRef indexConstant) returns LLVMValueRef;
public extern function LLVMConstInsertElement(LLVMValueRef vectorConstant, LLVMValueRef elementValueConstant, LLVMValueRef indexConstant) returns LLVMValueRef;
public extern function LLVMConstShuffleVector(LLVMValueRef vectorAConstant, LLVMValueRef vectorBConstant, LLVMValueRef maskConstant) returns LLVMValueRef;
//public extern function LLVMConstExtractValue(LLVMValueRef aggConstant, IntPointer idxList, int numIdx) returns LLVMValueRef;
//public extern function LLVMConstExtractValue(LLVMValueRef aggConstant, IntBuffer idxList, int numIdx) returns LLVMValueRef;
//public extern function LLVMConstExtractValue(LLVMValueRef aggConstant, int[] idxList, int numIdx) returns LLVMValueRef;
//public extern function LLVMConstInsertValue(LLVMValueRef aggConstant, LLVMValueRef elementValueConstant, IntBuffer idxList, int numIdx) returns LLVMValueRef;
//public extern function LLVMConstInsertValue(LLVMValueRef aggConstant, LLVMValueRef elementValueConstant, int[] idxList, int numIdx) returns LLVMValueRef;
//public extern function LLVMConstInsertValue(LLVMValueRef aggConstant, LLVMValueRef elementValueConstant, IntPointer idxList, int numIdx) returns LLVMValueRef;
public extern function LLVMConstInlineAsm(LLVMTypeRef ty, string asmString, string constraints, int hasSideEffects, int isAlignStack) returns LLVMValueRef;
//public extern function LLVMConstInlineAsm(LLVMTypeRef ty, BytePointer asmString, BytePointer constraints, int hasSideEffects, int isAlignStack) returns LLVMValueRef;
public extern function LLVMBlockAddress(LLVMValueRef f, LLVMBasicBlockRef bb) returns LLVMValueRef;
public extern function LLVMGetGlobalParent(LLVMValueRef global) returns LLVMModuleRef;
public extern function LLVMIsDeclaration(LLVMValueRef global) returns int;
public extern function LLVMGetLinkage(LLVMValueRef global) returns int;
public extern function LLVMSetLinkage(LLVMValueRef global, int linkage);
public extern function LLVMGetSection(LLVMValueRef global) returns BytePointer;
public extern function LLVMSetSection(LLVMValueRef global, string section);
//public extern function LLVMSetSection(LLVMValueRef global, BytePointer section);
public extern function LLVMGetVisibility(LLVMValueRef global) returns int;
public extern function LLVMSetVisibility(LLVMValueRef global, int viz);
public extern function LLVMGetDLLStorageClass(LLVMValueRef global) returns int;
public extern function LLVMSetDLLStorageClass(LLVMValueRef global, int classValue);
public extern function LLVMHasUnnamedAddr(LLVMValueRef global) returns int;
public extern function LLVMSetUnnamedAddr(LLVMValueRef global, int hasUnnamedAddr);
public extern function LLVMGetAlignment(LLVMValueRef v) returns int;
public extern function LLVMSetAlignment(LLVMValueRef v, int bytes);
//public extern function LLVMAddGlobal(LLVMModuleRef m, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef;
public extern function LLVMAddGlobal(LLVMModuleRef m, LLVMTypeRef ty, string name) returns LLVMValueRef;
public extern function LLVMAddGlobalInAddressSpace(LLVMModuleRef m, LLVMTypeRef ty, string name, int addressSpace) returns LLVMValueRef;
//public extern function LLVMAddGlobalInAddressSpace(LLVMModuleRef m, LLVMTypeRef ty, BytePointer name, int addressSpace) returns LLVMValueRef;
public extern function LLVMGetNamedGlobal(LLVMModuleRef m, string name) returns LLVMValueRef;
//public extern function LLVMGetNamedGlobal(LLVMModuleRef m, BytePointer name) returns LLVMValueRef;
public extern function LLVMGetFirstGlobal(LLVMModuleRef m) returns LLVMValueRef;
public extern function LLVMGetLastGlobal(LLVMModuleRef m) returns LLVMValueRef;
public extern function LLVMGetNextGlobal(LLVMValueRef globalVar) returns LLVMValueRef;
public extern function LLVMGetPreviousGlobal(LLVMValueRef globalVar) returns LLVMValueRef;
public extern function LLVMDeleteGlobal(LLVMValueRef globalVar);
public extern function LLVMGetInitializer(LLVMValueRef globalVar) returns LLVMValueRef;
public extern function LLVMSetInitializer(LLVMValueRef globalVar, LLVMValueRef constantVal);
public extern function LLVMIsThreadLocal(LLVMValueRef globalVar) returns int;
public extern function LLVMSetThreadLocal(LLVMValueRef globalVar, int isThreadLocal);
public extern function LLVMIsGlobalConstant(LLVMValueRef globalVar) returns int;
public extern function LLVMSetGlobalConstant(LLVMValueRef globalVar, int isConstant);
public extern function LLVMGetThreadLocalMode(LLVMValueRef globalVar) returns int;
public extern function LLVMSetThreadLocalMode(LLVMValueRef globalVar, int mode);
public extern function LLVMIsExternallyInitialized(LLVMValueRef globalVar) returns int;
public extern function LLVMSetExternallyInitialized(LLVMValueRef globalVar, int isExtInit);
public extern function LLVMAddAlias(LLVMModuleRef m, LLVMTypeRef ty, LLVMValueRef aliasee, string name) returns LLVMValueRef;
//public extern function LLVMAddAlias(LLVMModuleRef m, LLVMTypeRef ty, LLVMValueRef aliasee, BytePointer name) returns LLVMValueRef;
public extern function LLVMDeleteFunction(LLVMValueRef fn);
public extern function LLVMHasPersonalityFn(LLVMValueRef fn) returns int;
public extern function LLVMGetPersonalityFn(LLVMValueRef fn) returns LLVMValueRef;
public extern function LLVMSetPersonalityFn(LLVMValueRef fn, LLVMValueRef personalityFn);
public extern function LLVMGetIntrinsicID(LLVMValueRef fn) returns int;
public extern function LLVMGetFunctionCallConv(LLVMValueRef fn) returns int;
public extern function LLVMSetFunctionCallConv(LLVMValueRef fn, int cc);
public extern function LLVMGetGC(LLVMValueRef fn) returns BytePointer;
//public extern function LLVMSetGC(LLVMValueRef fn, BytePointer name);
public extern function LLVMSetGC(LLVMValueRef fn, string name);
public extern function LLVMAddAttributeAtIndex(LLVMValueRef f, int idx, LLVMAttributeRef a);
public extern function LLVMGetAttributeCountAtIndex(LLVMValueRef f, int idx) returns int;
public extern function LLVMGetAttributesAtIndex0(LLVMValueRef f, int idx, PointerPointer attrs);
public extern function LLVMGetAttributesAtIndex1(LLVMValueRef f, int idx, LLVMAttributeRef attrs);
public extern function LLVMGetEnumAttributeAtIndex(LLVMValueRef f, int idx, int kindID) returns LLVMAttributeRef;
//public extern function LLVMGetStringAttributeAtIndex(LLVMValueRef f, int idx, BytePointer k, int kLen) returns LLVMAttributeRef;
public extern function LLVMGetStringAttributeAtIndex(LLVMValueRef f, int idx, string k, int kLen) returns LLVMAttributeRef;
public extern function LLVMRemoveEnumAttributeAtIndex(LLVMValueRef f, int idx, int kindID);
//public extern function LLVMRemoveStringAttributeAtIndex(LLVMValueRef f, int idx, BytePointer k, int kLen);
public extern function LLVMRemoveStringAttributeAtIndex(LLVMValueRef f, int idx, string k, int kLen);
public extern function LLVMAddTargetDependentFunctionAttr(LLVMValueRef fn, string a, string v);
//public extern function LLVMAddTargetDependentFunctionAttr(LLVMValueRef fn, BytePointer a, BytePointer v);
public extern function LLVMCountParams(LLVMValueRef fn) returns int;
public extern function LLVMGetParams0(LLVMValueRef fn, PointerPointer params);
public extern function LLVMGetParams1(LLVMValueRef fn, LLVMValueRef params);
public extern function LLVMGetParam(LLVMValueRef fn, int index) returns LLVMValueRef;
public extern function LLVMGetParamParent(LLVMValueRef inst) returns LLVMValueRef;
public extern function LLVMGetFirstParam(LLVMValueRef fn) returns LLVMValueRef;
public extern function LLVMGetLastParam(LLVMValueRef fn) returns LLVMValueRef;
public extern function LLVMGetNextParam(LLVMValueRef arg) returns LLVMValueRef;
public extern function LLVMGetPreviousParam(LLVMValueRef arg) returns LLVMValueRef;
public extern function LLVMSetParamAlignment(LLVMValueRef arg, int align);
//public extern function LLVMMDStringInContext(LLVMContextRef c, BytePointer str, int sLen) returns LLVMValueRef;
public extern function LLVMMDStringInContext(LLVMContextRef c, string str, int sLen) returns LLVMValueRef;
//public extern function LLVMMDString(BytePointer str, int sLen) returns LLVMValueRef;
public extern function LLVMMDString(string str, int sLen) returns LLVMValueRef;
public extern function LLVMMDNodeInContext0(LLVMContextRef c, PointerPointer vals, int count) returns LLVMValueRef;
public extern function LLVMMDNodeInContext1(LLVMContextRef c, LLVMValueRef vals, int count) returns LLVMValueRef;
public extern function LLVMMDNode0(LLVMValueRef vals, int count) returns LLVMValueRef;
public extern function LLVMMDNode1(PointerPointer vals, int count) returns LLVMValueRef;
public extern function LLVMMetadataAsValue(LLVMContextRef c, LLVMMetadataRef md) returns LLVMValueRef;
public extern function LLVMValueAsMetadata(LLVMValueRef val) returns LLVMMetadataRef;
//public extern function LLVMGetMDString(LLVMValueRef v, int[] length) returns BytePointer;
//public extern function LLVMGetMDString(LLVMValueRef v, IntPointer length) returns BytePointer;
//public extern function LLVMGetMDString(LLVMValueRef v, IntBuffer length) returns string;
public extern function LLVMGetMDNodeNumOperands(LLVMValueRef v) returns int;
public extern function LLVMGetMDNodeOperands0(LLVMValueRef v, LLVMValueRef dest);
public extern function LLVMGetMDNodeOperands1(LLVMValueRef v, PointerPointer dest);
public extern function LLVMBasicBlockAsValue(LLVMBasicBlockRef bb) returns LLVMValueRef;
public extern function LLVMValueIsBasicBlock(LLVMValueRef val) returns int;
public extern function LLVMValueAsBasicBlock(LLVMValueRef val) returns LLVMBasicBlockRef;
public extern function LLVMGetBasicBlockName(LLVMBasicBlockRef bb) returns BytePointer;
public extern function LLVMGetBasicBlockParent(LLVMBasicBlockRef bb) returns LLVMValueRef;
public extern function LLVMGetBasicBlockTerminator(LLVMBasicBlockRef bb) returns LLVMValueRef;
public extern function LLVMCountBasicBlocks(LLVMValueRef fn) returns int;
public extern function LLVMGetBasicBlocks0(LLVMValueRef fn, LLVMBasicBlockRef basicBlocks);
public extern function LLVMGetBasicBlocks1(LLVMValueRef fn, PointerPointer basicBlocks);
public extern function LLVMGetFirstBasicBlock(LLVMValueRef fn) returns LLVMBasicBlockRef;
public extern function LLVMGetLastBasicBlock(LLVMValueRef fn) returns LLVMBasicBlockRef;
public extern function LLVMGetNextBasicBlock(LLVMBasicBlockRef bb) returns LLVMBasicBlockRef;
public extern function LLVMGetPreviousBasicBlock(LLVMBasicBlockRef bb) returns LLVMBasicBlockRef;
public extern function LLVMGetEntryBasicBlock(LLVMValueRef fn) returns LLVMBasicBlockRef;
//public extern function LLVMAppendBasicBlockInContext(LLVMContextRef c, LLVMValueRef fn, BytePointer name) returns LLVMBasicBlockRef;
public extern function LLVMAppendBasicBlockInContext(LLVMContextRef c, LLVMValueRef fn, string name) returns LLVMBasicBlockRef;
//public extern function LLVMAppendBasicBlock(LLVMValueRef fn, BytePointer name) returns LLVMBasicBlockRef;
public extern function LLVMAppendBasicBlock(LLVMValueRef fn, string name) returns LLVMBasicBlockRef;
//public extern function LLVMInsertBasicBlockInContext(LLVMContextRef c, LLVMBasicBlockRef bb, BytePointer name) returns LLVMBasicBlockRef;
public extern function LLVMInsertBasicBlockInContext(LLVMContextRef c, LLVMBasicBlockRef bb, string name) returns LLVMBasicBlockRef;
public extern function LLVMInsertBasicBlock(LLVMBasicBlockRef insertBeforeBB, string name) returns LLVMBasicBlockRef;
//public extern function LLVMInsertBasicBlock(LLVMBasicBlockRef insertBeforeBB, BytePointer name) returns LLVMBasicBlockRef;
public extern function LLVMDeleteBasicBlock(LLVMBasicBlockRef bb);
public extern function LLVMRemoveBasicBlockFromParent(LLVMBasicBlockRef bb);
public extern function LLVMMoveBasicBlockBefore(LLVMBasicBlockRef bb, LLVMBasicBlockRef movePos);
public extern function LLVMMoveBasicBlockAfter(LLVMBasicBlockRef bb, LLVMBasicBlockRef movePos);
public extern function LLVMGetFirstInstruction(LLVMBasicBlockRef bb) returns LLVMValueRef;
public extern function LLVMGetLastInstruction(LLVMBasicBlockRef bb) returns LLVMValueRef;
public extern function LLVMHasMetadata(LLVMValueRef val) returns int;
public extern function LLVMGetMetadata(LLVMValueRef val, int kindID) returns LLVMValueRef;
public extern function LLVMSetMetadata(LLVMValueRef val, int kindID, LLVMValueRef node);
public extern function LLVMGetInstructionParent(LLVMValueRef inst) returns LLVMBasicBlockRef;
public extern function LLVMGetNextInstruction(LLVMValueRef inst) returns LLVMValueRef;
public extern function LLVMGetPreviousInstruction(LLVMValueRef inst) returns LLVMValueRef;
public extern function LLVMInstructionRemoveFromParent(LLVMValueRef inst);
public extern function LLVMInstructionEraseFromParent(LLVMValueRef inst);
public extern function LLVMGetInstructionOpcode(LLVMValueRef inst) returns int;
public extern function LLVMGetICmpPredicate(LLVMValueRef inst) returns int;
public extern function LLVMGetFCmpPredicate(LLVMValueRef inst) returns int;
public extern function LLVMInstructionClone(LLVMValueRef inst) returns LLVMValueRef;
public extern function LLVMGetNumArgOperands(LLVMValueRef instr) returns int;
public extern function LLVMSetInstructionCallConv(LLVMValueRef instr, int cc);
public extern function LLVMGetInstructionCallConv(LLVMValueRef instr) returns int;
public extern function LLVMSetInstrParamAlignment(LLVMValueRef instr, int index, int align);
public extern function LLVMAddCallSiteAttribute(LLVMValueRef c, int idx, LLVMAttributeRef a);
public extern function LLVMGetCallSiteAttributeCount(LLVMValueRef c, int idx) returns int;
public extern function LLVMGetCallSiteAttributes0(LLVMValueRef c, int idx, PointerPointer attrs);
public extern function LLVMGetCallSiteAttributes1(LLVMValueRef c, int idx, LLVMAttributeRef attrs);
public extern function LLVMGetCallSiteEnumAttribute(LLVMValueRef c, int idx, int kindID) returns LLVMAttributeRef;
public extern function LLVMGetCallSiteStringAttribute(LLVMValueRef c, int idx, string k, int kLen) returns LLVMAttributeRef;
//public extern function LLVMGetCallSiteStringAttribute(LLVMValueRef c, int idx, BytePointer k, int kLen) returns LLVMAttributeRef;
public extern function LLVMRemoveCallSiteEnumAttribute(LLVMValueRef c, int idx, int kindID);
//public extern function LLVMRemoveCallSiteStringAttribute(LLVMValueRef c, int idx, BytePointer k, int kLen);
public extern function LLVMRemoveCallSiteStringAttribute(LLVMValueRef c, int idx, string k, int kLen);
public extern function LLVMGetCalledValue(LLVMValueRef instr) returns LLVMValueRef;
public extern function LLVMIsTailCall(LLVMValueRef callInst) returns int;
public extern function LLVMSetTailCall(LLVMValueRef callInst, int isTailCall);
public extern function LLVMGetNormalDest(LLVMValueRef invokeInst) returns LLVMBasicBlockRef;
public extern function LLVMGetUnwindDest(LLVMValueRef invokeInst) returns LLVMBasicBlockRef;
public extern function LLVMSetNormalDest(LLVMValueRef invokeInst, LLVMBasicBlockRef b);
public extern function LLVMSetUnwindDest(LLVMValueRef invokeInst, LLVMBasicBlockRef b);
public extern function LLVMGetNumSuccessors(LLVMValueRef term) returns int;
public extern function LLVMGetSuccessor(LLVMValueRef term, int i) returns LLVMBasicBlockRef;
public extern function LLVMSetSuccessor(LLVMValueRef term, int i, LLVMBasicBlockRef block);
public extern function LLVMIsConditional(LLVMValueRef branch) returns int;
public extern function LLVMGetCondition(LLVMValueRef branch) returns LLVMValueRef;
public extern function LLVMSetCondition(LLVMValueRef branch, LLVMValueRef cond);
public extern function LLVMGetSwitchDefaultDest(LLVMValueRef switchInstr) returns LLVMBasicBlockRef;
public extern function LLVMGetAllocatedType(LLVMValueRef alloca) returns LLVMTypeRef;
public extern function LLVMIsInBounds(LLVMValueRef gep) returns int;
public extern function LLVMSetIsInBounds(LLVMValueRef gep, int inBounds);
public extern function LLVMAddIncoming0(LLVMValueRef phiNode, LLVMValueRef incomingValues, LLVMBasicBlockRef incomingBlocks, int count);
public extern function LLVMAddIncoming1(LLVMValueRef phiNode, PointerPointer incomingValues, PointerPointer incomingBlocks, int count);
public extern function LLVMCountIncoming(LLVMValueRef phiNode) returns int;
public extern function LLVMGetIncomingValue(LLVMValueRef phiNode, int index) returns LLVMValueRef;
public extern function LLVMGetIncomingBlock(LLVMValueRef phiNode, int index) returns LLVMBasicBlockRef;
public extern function LLVMGetNumIndices(LLVMValueRef inst) returns int;
public extern function LLVMGetIndices(LLVMValueRef inst) returns IntPointer;
public extern function LLVMCreateBuilderInContext(LLVMContextRef c) returns LLVMBuilderRef;
public extern function LLVMCreateBuilder() returns LLVMBuilderRef;
public extern function LLVMPositionBuilder(LLVMBuilderRef builder, LLVMBasicBlockRef block, LLVMValueRef instr);
public extern function LLVMPositionBuilderBefore(LLVMBuilderRef builder, LLVMValueRef instr);
public extern function LLVMPositionBuilderAtEnd(LLVMBuilderRef builder, LLVMBasicBlockRef block);
public extern function LLVMGetInsertBlock(LLVMBuilderRef builder) returns LLVMBasicBlockRef;
public extern function LLVMClearInsertionPosition(LLVMBuilderRef builder);
public extern function LLVMInsertIntoBuilder(LLVMBuilderRef builder, LLVMValueRef instr);
public extern function LLVMInsertIntoBuilderWithName(LLVMBuilderRef builder, LLVMValueRef instr, string name);
//public extern function LLVMInsertIntoBuilderWithName(LLVMBuilderRef builder, LLVMValueRef instr, BytePointer name);
public extern function LLVMDisposeBuilder(LLVMBuilderRef builder);
public extern function LLVMSetCurrentDebugLocation(LLVMBuilderRef builder, LLVMValueRef l);
public extern function LLVMGetCurrentDebugLocation(LLVMBuilderRef builder) returns LLVMValueRef;
public extern function LLVMSetInstDebugLocation(LLVMBuilderRef builder, LLVMValueRef inst);
public extern function LLVMBuildRetVoid(LLVMBuilderRef arg0) returns LLVMValueRef;
public extern function LLVMBuildRet(LLVMBuilderRef arg0, LLVMValueRef v) returns LLVMValueRef;
public extern function LLVMBuildAggregateRet0(LLVMBuilderRef arg0, PointerPointer retVals, int n) returns LLVMValueRef;
public extern function LLVMBuildAggregateRet1(LLVMBuilderRef arg0, LLVMValueRef retVals, int n) returns LLVMValueRef;
public extern function LLVMBuildBr(LLVMBuilderRef arg0, LLVMBasicBlockRef dest) returns LLVMValueRef;
public extern function LLVMBuildCondBr(LLVMBuilderRef arg0, LLVMValueRef ifValue, LLVMBasicBlockRef then, LLVMBasicBlockRef elseValue) returns LLVMValueRef;
public extern function LLVMBuildSwitch(LLVMBuilderRef arg0, LLVMValueRef v, LLVMBasicBlockRef elseValue, int numCases) returns LLVMValueRef;
public extern function LLVMBuildIndirectBr(LLVMBuilderRef b, LLVMValueRef addr, int numDests) returns LLVMValueRef;
//public extern function LLVMBuildInvoke(LLVMBuilderRef arg0, LLVMValueRef fn, LLVMValueRef args, int numArgs, LLVMBasicBlockRef then, LLVMBasicBlockRef catchValue, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildInvoke(LLVMBuilderRef arg0, LLVMValueRef fn, PointerPointer args, int numArgs, LLVMBasicBlockRef then, LLVMBasicBlockRef catchValue, string name) returns LLVMValueRef;
public extern function LLVMBuildLandingPad(LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef persFn, int numClauses, string name) returns LLVMValueRef;
//public extern function LLVMBuildLandingPad(LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef persFn, int numClauses, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildResume(LLVMBuilderRef b, LLVMValueRef exn) returns LLVMValueRef;
public extern function LLVMBuildUnreachable(LLVMBuilderRef arg0) returns LLVMValueRef;
public extern function LLVMAddCase(LLVMValueRef switchValue, LLVMValueRef onVal, LLVMBasicBlockRef dest);
public extern function LLVMAddDestination(LLVMValueRef indirectBr, LLVMBasicBlockRef dest);
public extern function LLVMGetNumClauses(LLVMValueRef landingPad) returns int;
public extern function LLVMGetClause(LLVMValueRef landingPad, int idx) returns LLVMValueRef;
public extern function LLVMAddClause(LLVMValueRef landingPad, LLVMValueRef clauseVal);
public extern function LLVMIsCleanup(LLVMValueRef landingPad) returns int;
public extern function LLVMSetCleanup(LLVMValueRef landingPad, int val);
public extern function LLVMBuildAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildNSWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNSWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildNUWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildNUWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildFAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildNSWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNSWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildNUWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNUWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildFSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildNSWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNSWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildNUWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNUWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildFMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildFMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildExactUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildExactUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildExactSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildExactSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildFDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildURem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildURem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildSRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildSRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildFRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildShl(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildShl(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildLShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildLShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildAShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildAShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildAnd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildAnd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildOr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildOr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildXor(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildXor(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildBinOp(LLVMBuilderRef b, int op, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildBinOp(LLVMBuilderRef b, int op, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildNeg(LLVMBuilderRef arg0, LLVMValueRef v, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNeg(LLVMBuilderRef arg0, LLVMValueRef v, string name) returns LLVMValueRef;
//public extern function LLVMBuildNSWNeg(LLVMBuilderRef b, LLVMValueRef v, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNSWNeg(LLVMBuilderRef b, LLVMValueRef v, string name) returns LLVMValueRef;
//public extern function LLVMBuildNUWNeg(LLVMBuilderRef b, LLVMValueRef v, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildNUWNeg(LLVMBuilderRef b, LLVMValueRef v, string name) returns LLVMValueRef;
//public extern function LLVMBuildFNeg(LLVMBuilderRef arg0, LLVMValueRef v, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFNeg(LLVMBuilderRef arg0, LLVMValueRef v, string name) returns LLVMValueRef;
public extern function LLVMBuildNot(LLVMBuilderRef arg0, LLVMValueRef v, string name) returns LLVMValueRef;
//public extern function LLVMBuildNot(LLVMBuilderRef arg0, LLVMValueRef v, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, string name) returns LLVMValueRef;
public extern function LLVMBuildArrayMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, string name) returns LLVMValueRef;
//public extern function LLVMBuildArrayMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, string name) returns LLVMValueRef;
public extern function LLVMBuildArrayAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, string name) returns LLVMValueRef;
//public extern function LLVMBuildArrayAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFree(LLVMBuilderRef arg0, LLVMValueRef pointerVal) returns LLVMValueRef;
//public extern function LLVMBuildLoad(LLVMBuilderRef arg0, LLVMValueRef pointerVal, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildLoad(LLVMBuilderRef arg0, LLVMValueRef pointerVal, string name) returns LLVMValueRef;
public extern function LLVMBuildStore(LLVMBuilderRef arg0, LLVMValueRef val, LLVMValueRef ptr) returns LLVMValueRef;
public extern function LLVMBuildGEP(LLVMBuilderRef b, LLVMValueRef pointer, PointerPointer indices, int numIndices, string name) returns LLVMValueRef;
//public extern function LLVMBuildGEP(LLVMBuilderRef b, LLVMValueRef pointer, LLVMValueRef indices, int numIndices, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildInBoundsGEP(LLVMBuilderRef b, LLVMValueRef pointer, LLVMValueRef indices, int numIndices, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildInBoundsGEP(LLVMBuilderRef b, LLVMValueRef pointer, PointerPointer indices, int numIndices, string name) returns LLVMValueRef;
public extern function LLVMBuildStructGEP(LLVMBuilderRef b, LLVMValueRef pointer, int idx, string name) returns LLVMValueRef;
//public extern function LLVMBuildStructGEP(LLVMBuilderRef b, LLVMValueRef pointer, int idx, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildGlobalString(LLVMBuilderRef b, BytePointer str, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildGlobalString(LLVMBuilderRef b, string str, string name) returns LLVMValueRef;
//public extern function LLVMBuildGlobalStringPtr(LLVMBuilderRef b, BytePointer str, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildGlobalStringPtr(LLVMBuilderRef b, string str, string name) returns LLVMValueRef;
public extern function LLVMGetVolatile(LLVMValueRef memoryAccessInst) returns int;
public extern function LLVMSetVolatile(LLVMValueRef memoryAccessInst, int isVolatile);
public extern function LLVMGetOrdering(LLVMValueRef memoryAccessInst) returns int;
public extern function LLVMSetOrdering(LLVMValueRef memoryAccessInst, int ordering);
public extern function LLVMBuildTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildZExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildZExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildSExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildSExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
public extern function LLVMBuildFPToUI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildFPToUI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFPToSI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildFPToSI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildUIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildUIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildSIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildSIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
public extern function LLVMBuildFPTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildFPTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFPExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildFPExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildPtrToInt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildPtrToInt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildIntToPtr(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildIntToPtr(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
public extern function LLVMBuildBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildAddrSpaceCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildAddrSpaceCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
public extern function LLVMBuildZExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildZExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildSExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildSExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
public extern function LLVMBuildTruncOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildTruncOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildCast(LLVMBuilderRef b, int op, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildCast(LLVMBuilderRef b, int op, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildPointerCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildPointerCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildIntCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildIntCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildFPCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildFPCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef;
//public extern function LLVMBuildICmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildICmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildFCmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
//public extern function LLVMBuildFCmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildPhi(LLVMBuilderRef arg0, LLVMTypeRef ty, string name) returns LLVMValueRef;
//public extern function LLVMBuildPhi(LLVMBuilderRef arg0, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildCall(LLVMBuilderRef arg0, LLVMValueRef fn, PointerPointer args, int numArgs, string name) returns LLVMValueRef;
public extern function LLVMBuildCall(LLVMBuilderRef arg0, LLVMValueRef fn, LLVMValueRef[] args, int numArgs, string name) returns LLVMValueRef;
//public extern function LLVMBuildSelect(LLVMBuilderRef arg0, LLVMValueRef ifValue, LLVMValueRef then, LLVMValueRef elseValue, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildSelect(LLVMBuilderRef arg0, LLVMValueRef ifValue, LLVMValueRef then, LLVMValueRef elseValue, string name) returns LLVMValueRef;
public extern function LLVMBuildVAArg(LLVMBuilderRef arg0, LLVMValueRef list, LLVMTypeRef ty, string name) returns LLVMValueRef;
//public extern function LLVMBuildVAArg(LLVMBuilderRef arg0, LLVMValueRef list, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildExtractElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef index, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildExtractElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef index, string name) returns LLVMValueRef;
public extern function LLVMBuildInsertElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef eltVal, LLVMValueRef index, string name) returns LLVMValueRef;
//public extern function LLVMBuildInsertElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef eltVal, LLVMValueRef index, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildShuffleVector(LLVMBuilderRef arg0, LLVMValueRef v1, LLVMValueRef v2, LLVMValueRef mask, string name) returns LLVMValueRef;
//public extern function LLVMBuildShuffleVector(LLVMBuilderRef arg0, LLVMValueRef v1, LLVMValueRef v2, LLVMValueRef mask, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildExtractValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, int index, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildExtractValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, int index, string name) returns LLVMValueRef;
public extern function LLVMBuildInsertValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, LLVMValueRef eltVal, int index, string name) returns LLVMValueRef;
//public extern function LLVMBuildInsertValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, LLVMValueRef eltVal, int index, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildIsNull(LLVMBuilderRef arg0, LLVMValueRef val, string name) returns LLVMValueRef;
//public extern function LLVMBuildIsNull(LLVMBuilderRef arg0, LLVMValueRef val, BytePointer name) returns LLVMValueRef;
//public extern function LLVMBuildIsNotNull(LLVMBuilderRef arg0, LLVMValueRef val, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildIsNotNull(LLVMBuilderRef arg0, LLVMValueRef val, string name) returns LLVMValueRef;
//public extern function LLVMBuildPtrDiff(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildPtrDiff(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef;
public extern function LLVMBuildFence(LLVMBuilderRef b, int ordering, int singleThread, string name) returns LLVMValueRef;
//public extern function LLVMBuildFence(LLVMBuilderRef b, int ordering, int singleThread, BytePointer name) returns LLVMValueRef;
public extern function LLVMBuildAtomicRMW(LLVMBuilderRef b, int op, LLVMValueRef ptr, LLVMValueRef val, int ordering, int singleThread) returns LLVMValueRef;
public extern function LLVMBuildAtomicCmpXchg(LLVMBuilderRef b, LLVMValueRef ptr, LLVMValueRef cmp, LLVMValueRef newValue, int successOrdering, int failureOrdering, int singleThread) returns LLVMValueRef;
public extern function LLVMIsAtomicSingleThread(LLVMValueRef atomicInst) returns int;
public extern function LLVMSetAtomicSingleThread(LLVMValueRef atomicInst, int singleThread);
public extern function LLVMGetCmpXchgSuccessOrdering(LLVMValueRef cmpXchgInst) returns int;
public extern function LLVMSetCmpXchgSuccessOrdering(LLVMValueRef cmpXchgInst, int ordering);
public extern function LLVMGetCmpXchgFailureOrdering(LLVMValueRef cmpXchgInst) returns int;
public extern function LLVMSetCmpXchgFailureOrdering(LLVMValueRef cmpXchgInst, int ordering);
public extern function LLVMCreateModuleProviderForExistingModule(LLVMModuleRef m) returns LLVMModuleProviderRef;
public extern function LLVMDisposeModuleProvider(LLVMModuleProviderRef m);
//public extern function LLVMCreateMemoryBufferWithContentsOfFile(string path, PointerPointer outMemBuf, ByteBuffer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, byte[] outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithContentsOfFile(string path, PointerPointer outMemBuf, BytePointer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, ByteBuffer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithContentsOfFile(string path, PointerPointer outMemBuf, byte[] outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, PointerPointer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, BytePointer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithSTDIN0(LLVMMemoryBufferRef outMemBuf, byte[] outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithSTDIN(PointerPointer outMemBuf, BytePointer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef outMemBuf, ByteBuffer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithSTDIN1(PointerPointer outMemBuf, byte[] outMessage) returns int;
public extern function LLVMCreateMemoryBufferWithSTDIN2(LLVMMemoryBufferRef outMemBuf, PointerPointer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef outMemBuf, BytePointer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithSTDIN(PointerPointer outMemBuf, ByteBuffer outMessage) returns int;
//public extern function LLVMCreateMemoryBufferWithMemoryRange(BytePointer inputData, int inputDataLength, BytePointer bufferName, int requiresNullTerminator) returns LLVMMemoryBufferRef;
public extern function LLVMCreateMemoryBufferWithMemoryRange(string inputData, int inputDataLength, string bufferName, int requiresNullTerminator) returns LLVMMemoryBufferRef;
public extern function LLVMCreateMemoryBufferWithMemoryRangeCopy(string inputData, int inputDataLength, string bufferName) returns LLVMMemoryBufferRef;
//public extern function LLVMCreateMemoryBufferWithMemoryRangeCopy(BytePointer inputData, int inputDataLength, BytePointer bufferName) returns LLVMMemoryBufferRef;
public extern function LLVMGetBufferStart(LLVMMemoryBufferRef memBuf) returns BytePointer;
public extern function LLVMGetBufferSize(LLVMMemoryBufferRef memBuf) returns int;
public extern function LLVMDisposeMemoryBuffer(LLVMMemoryBufferRef memBuf);
public extern function LLVMGetGlobalPassRegistry() returns LLVMPassRegistryRef;
public extern function LLVMCreatePassManager() returns LLVMPassManagerRef;
public extern function LLVMCreateFunctionPassManagerForModule(LLVMModuleRef m) returns LLVMPassManagerRef;
public extern function LLVMCreateFunctionPassManager(LLVMModuleProviderRef mp) returns LLVMPassManagerRef;
public extern function LLVMRunPassManager(LLVMPassManagerRef pm, LLVMModuleRef m) returns int;
public extern function LLVMInitializeFunctionPassManager(LLVMPassManagerRef fpm) returns int;
public extern function LLVMRunFunctionPassManager(LLVMPassManagerRef fpm, LLVMValueRef f) returns int;
public extern function LLVMFinalizeFunctionPassManager(LLVMPassManagerRef fpm) returns int;
public extern function LLVMDisposePassManager(LLVMPassManagerRef pm);
public extern function LLVMStartMultithreaded() returns int;
public extern function LLVMStopMultithreaded();
public extern function LLVMIsMultithreaded() returns int;
//public extern function LLVMVerifyModule(LLVMModuleRef m, int action, ByteBuffer outMessage) returns int;
//public extern function LLVMVerifyModule0(LLVMModuleRef m, int action, byte[] outMessage) returns int;
//public extern function LLVMVerifyModule(LLVMModuleRef m, int action, BytePointer outMessage) returns int;
public extern function LLVMVerifyModule1(LLVMModuleRef m, int action, PointerPointer outMessage) returns int;
public extern function LLVMVerifyFunction(LLVMValueRef fn, int action) returns int;
public extern function LLVMViewFunctionCFG(LLVMValueRef fn);
public extern function LLVMViewFunctionCFGOnly(LLVMValueRef fn);
//public extern function LLVMParseBitcode(LLVMMemoryBufferRef memBuf, PointerPointer outModule, ByteBuffer outMessage) returns int;
//public extern function LLVMParseBitcode(LLVMMemoryBufferRef memBuf, PointerPointer outModule, BytePointer outMessage) returns int;
//public extern function LLVMParseBitcode(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, ByteBuffer outMessage) returns int;
//public extern function LLVMParseBitcode0(LLVMMemoryBufferRef memBuf, PointerPointer outModule, byte[] outMessage) returns int;
public extern function LLVMParseBitcode1(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, PointerPointer outMessage) returns int;
//public extern function LLVMParseBitcode(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, BytePointer outMessage) returns int;
//public extern function LLVMParseBitcode2(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, byte[] outMessage) returns int;
public extern function LLVMParseBitcode20(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule) returns int;
public extern function LLVMParseBitcode21(LLVMMemoryBufferRef memBuf, PointerPointer outModule) returns int;
//public extern function LLVMParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule, BytePointer outMessage) returns int;
//public extern function LLVMParseBitcodeInContext0(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, byte[] outMessage) returns int;
//public extern function LLVMParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, ByteBuffer outMessage) returns int;
//public extern function LLVMParseBitcodeInContext1(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule, byte[] outMessage) returns int;
public extern function LLVMParseBitcodeInContext2(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, PointerPointer outMessage) returns int;
//public extern function LLVMParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, BytePointer outMessage) returns int;
//public extern function LLVMParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule, ByteBuffer outMessage) returns int;
public extern function LLVMParseBitcodeInContext20(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule) returns int;
public extern function LLVMParseBitcodeInContext21(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule) returns int;
//public extern function LLVMGetBitcodeModuleInContext0(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, byte[] outMessage) returns int;
//public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, BytePointer outMessage) returns int;
//public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, ByteBuffer outMessage) returns int;
//public extern function LLVMGetBitcodeModuleInContext1(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, byte[] outMessage) returns int;
//public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, BytePointer outMessage) returns int;
public extern function LLVMGetBitcodeModuleInContext2(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, PointerPointer outMessage) returns int;
//public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, ByteBuffer outMessage) returns int;
public extern function LLVMGetBitcodeModuleInContext20(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM) returns int;
public extern function LLVMGetBitcodeModuleInContext21(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM) returns int;
//public extern function LLVMGetBitcodeModule0(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, byte[] outMessage) returns int;
//public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef memBuf, PointerPointer outM, ByteBuffer outMessage) returns int;
//public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef memBuf, PointerPointer outM, BytePointer outMessage) returns int;
//public extern function LLVMGetBitcodeModule1(LLVMMemoryBufferRef memBuf, PointerPointer outM, byte[] outMessage) returns int;
//public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, ByteBuffer outMessage) returns int;
public extern function LLVMGetBitcodeModule2(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, PointerPointer outMessage) returns int;
//public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, BytePointer outMessage) returns int;
public extern function LLVMGetBitcodeModule20(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM) returns int;
public extern function LLVMGetBitcodeModule21(LLVMMemoryBufferRef memBuf, PointerPointer outM) returns int;
public extern function LLVMWriteBitcodeToFile(LLVMModuleRef m, string path) returns int;
//public extern function LLVMWriteBitcodeToFile(LLVMModuleRef m, BytePointer path) returns int;
public extern function LLVMWriteBitcodeToFD(LLVMModuleRef m, int fd, int shouldClose, int unbuffered) returns int;
public extern function LLVMWriteBitcodeToFileHandle(LLVMModuleRef m, int handle) returns int;
public extern function LLVMWriteBitcodeToMemoryBuffer(LLVMModuleRef m) returns LLVMMemoryBufferRef;
//public extern function LLVMCreateDisasm(BytePointer tripleName, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef;
public extern function LLVMCreateDisasm(string tripleName, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef;
public extern function LLVMCreateDisasmCPU(string triple, string cpu, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef;
//public extern function LLVMCreateDisasmCPU(BytePointer triple, BytePointer cpu, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef;
public extern function LLVMCreateDisasmCPUFeatures(string triple, string cpu, string features, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef;
//public extern function LLVMCreateDisasmCPUFeatures(BytePointer triple, BytePointer cpu, BytePointer features, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef;
public extern function LLVMSetDisasmOptions(LLVMDisasmContextRef dc, int options) returns int;
public extern function LLVMDisasmDispose(LLVMDisasmContextRef dc);
//public extern function LLVMDisasmInstruction(LLVMDisasmContextRef dc, ByteBuffer bytes, int bytesSize, int pc, ByteBuffer outString, int outStringSize) returns int;
//public extern function LLVMDisasmInstruction(LLVMDisasmContextRef dc, BytePointer bytes, int bytesSize, int pc, BytePointer outString, int outStringSize) returns int;
//public extern function LLVMDisasmInstruction(LLVMDisasmContextRef dc, byte[] bytes, int bytesSize, int pc, byte[] outString, int outStringSize) returns int;
public extern function LLVMInitializeTransformUtils(LLVMPassRegistryRef r);
public extern function LLVMInitializeScalarOpts(LLVMPassRegistryRef r);
public extern function LLVMInitializeObjCARCOpts(LLVMPassRegistryRef r);
public extern function LLVMInitializeVectorization(LLVMPassRegistryRef r);
public extern function LLVMInitializeInstCombine(LLVMPassRegistryRef r);
public extern function LLVMInitializeIPO(LLVMPassRegistryRef r);
public extern function LLVMInitializeInstrumentation(LLVMPassRegistryRef r);
public extern function LLVMInitializeAnalysis(LLVMPassRegistryRef r);
public extern function LLVMInitializeIPA(LLVMPassRegistryRef r);
public extern function LLVMInitializeCodeGen(LLVMPassRegistryRef r);
public extern function LLVMInitializeTarget(LLVMPassRegistryRef r);
//public extern function LLVMParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, BytePointer outMessage) returns int;
//public extern function LLVMParseIRInContext0(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, byte[] outMessage) returns int;
//public extern function LLVMParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, ByteBuffer outMessage) returns int;
//public extern function LLVMParseIRInContext1(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, byte[] outMessage) returns int;
public extern function LLVMParseIRInContext2(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, PointerPointer outMessage) returns int;
//public extern function LLVMParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, BytePointer outMessage) returns int;
//public extern function LLVMParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, ByteBuffer outMessage) returns int;
public extern function LLVMLinkModules2(LLVMModuleRef dest, LLVMModuleRef src) returns int;
//public extern function lto_get_version() returns BytePointer;
//public extern function lto_get_error_message() returns BytePointer;
//public extern function lto_module_is_object_file(string path) returns boolean;
//public extern function lto_module_is_object_file(BytePointer path) returns boolean;
//public extern function lto_module_is_object_file_for_target(BytePointer path, BytePointer target_triple_prefix) returns boolean;
//public extern function lto_module_is_object_file_for_target(string path, string target_triple_prefix) returns boolean;
//public extern function lto_module_has_objc_category(Pointer mem, int length) returns boolean;
//public extern function lto_module_is_object_file_in_memory(Pointer mem, int length) returns boolean;
//public extern function lto_module_is_object_file_in_memory_for_target(Pointer mem, int length, BytePointer target_triple_prefix) returns boolean;
//public extern function lto_module_is_object_file_in_memory_for_target(Pointer mem, int length, string target_triple_prefix) returns boolean;
//public extern function lto_module_create(string path) returns lto_module_t;
//public extern function lto_module_create(BytePointer path) returns lto_module_t;
//public extern function lto_module_create_from_memory(Pointer mem, int length) returns lto_module_t;
//public extern function lto_module_create_from_memory_with_path(Pointer mem, int length, BytePointer path) returns lto_module_t;
//public extern function lto_module_create_from_memory_with_path(Pointer mem, int length, string path) returns lto_module_t;
//public extern function lto_module_create_in_local_context(Pointer mem, int length, string path) returns lto_module_t;
//public extern function lto_module_create_in_local_context(Pointer mem, int length, BytePointer path) returns lto_module_t;
//public extern function lto_module_create_in_codegen_context(Pointer mem, int length, BytePointer path, lto_code_gen_t cg) returns lto_module_t;
//public extern function lto_module_create_in_codegen_context(Pointer mem, int length, string path, lto_code_gen_t cg) returns lto_module_t;
//public extern function lto_module_create_from_fd(int fd, string path, int file_size) returns lto_module_t;
//public extern function lto_module_create_from_fd(int fd, BytePointer path, int file_size) returns lto_module_t;
//public extern function lto_module_create_from_fd_at_offset(int fd, string path, int file_size, int map_size, int offset) returns lto_module_t;
//public extern function lto_module_create_from_fd_at_offset(int fd, BytePointer path, int file_size, int map_size, int offset) returns lto_module_t;
//public extern function lto_module_dispose(lto_module_t mod);
//public extern function lto_module_get_target_triple(lto_module_t mod) returns BytePointer;
//public extern function lto_module_set_target_triple(lto_module_t mod, string triple);
//public extern function lto_module_set_target_triple(lto_module_t mod, BytePointer triple);
//public extern function lto_module_get_num_symbols(lto_module_t mod) returns int;
//public extern function lto_module_get_symbol_name(lto_module_t mod, int index) returns BytePointer;
//public extern function lto_module_get_symbol_attribute(lto_module_t mod, int index) returns int;
//public extern function lto_module_get_linkeropts(lto_module_t mod) returns BytePointer;
//public extern function lto_codegen_set_diagnostic_handler(lto_code_gen_t arg0, lto_diagnostic_handler_t arg1, Pointer arg2);
//public extern function lto_codegen_create() returns lto_code_gen_t;
//public extern function lto_codegen_create_in_local_context() returns lto_code_gen_t;
//public extern function lto_codegen_dispose(lto_code_gen_t arg0);
//public extern function lto_codegen_add_module(lto_code_gen_t cg, lto_module_t mod) returns boolean;
//public extern function lto_codegen_set_module(lto_code_gen_t cg, lto_module_t mod);
//public extern function lto_codegen_set_debug_model(lto_code_gen_t cg, int arg1) returns boolean;
//public extern function lto_codegen_set_pic_model(lto_code_gen_t cg, int arg1) returns boolean;
//public extern function lto_codegen_set_cpu(lto_code_gen_t cg, BytePointer cpu);
//public extern function lto_codegen_set_cpu(lto_code_gen_t cg, string cpu);
//public extern function lto_codegen_set_assembler_path(lto_code_gen_t cg, string path);
//public extern function lto_codegen_set_assembler_path(lto_code_gen_t cg, BytePointer path);
//public extern function lto_codegen_set_assembler_args(lto_code_gen_t cg, ByteBuffer args, int nargs);
//public extern function lto_codegen_set_assembler_args(lto_code_gen_t cg, byte[] args, int nargs);
//public extern function lto_codegen_set_assembler_args(lto_code_gen_t cg, BytePointer args, int nargs);
//public extern function lto_codegen_set_assembler_args(lto_code_gen_t cg, PointerPointer args, int nargs);
//public extern function lto_codegen_add_must_preserve_symbol(lto_code_gen_t cg, string symbol);
//public extern function lto_codegen_add_must_preserve_symbol(lto_code_gen_t cg, BytePointer symbol);
//public extern function lto_codegen_write_merged_modules(lto_code_gen_t cg, BytePointer path) returns boolean;
//public extern function lto_codegen_write_merged_modules(lto_code_gen_t cg, string path) returns boolean;
//public extern function lto_codegen_compile(lto_code_gen_t cg, SizeTPointer length) returns Pointer;
//public extern function lto_codegen_compile_to_file(lto_code_gen_t cg, BytePointer name) returns boolean;
//public extern function lto_codegen_compile_to_file(lto_code_gen_t cg, byte[] name) returns boolean;
//public extern function lto_codegen_compile_to_file(lto_code_gen_t cg, ByteBuffer name) returns boolean;
//public extern function lto_codegen_compile_to_file(lto_code_gen_t cg, PointerPointer name) returns boolean;
//public extern function lto_codegen_optimize(lto_code_gen_t cg) returns boolean;
//public extern function lto_codegen_compile_optimized(lto_code_gen_t cg, SizeTPointer length) returns Pointer;
//public extern function lto_api_version() returns int;
//public extern function lto_codegen_debug_options(lto_code_gen_t cg, string arg1);
//public extern function lto_codegen_debug_options(lto_code_gen_t cg, BytePointer arg1);
//public extern function lto_initialize_disassembler();
//public extern function lto_codegen_set_should_internalize(lto_code_gen_t cg, boolean shouldInternalize);
//public extern function lto_codegen_set_should_embed_uselists(lto_code_gen_t cg, boolean shouldEmbedUselists);
//public extern function thinlto_create_codegen() returns thinlto_code_gen_t;
//public extern function thinlto_codegen_dispose(thinlto_code_gen_t cg);
//public extern function thinlto_codegen_add_module(thinlto_code_gen_t cg, BytePointer identifier, BytePointer data, int length);
//public extern function thinlto_codegen_add_module(thinlto_code_gen_t cg, string identifier, string data, int length);
//public extern function thinlto_codegen_process(thinlto_code_gen_t cg);
//public extern function thinlto_module_get_num_objects(thinlto_code_gen_t cg) returns int;
//public extern function thinlto_module_get_object(thinlto_code_gen_t cg, int index) returns LTOObjectBuffer;
//public extern function thinlto_module_get_num_object_files(thinlto_code_gen_t cg) returns int;
//public extern function thinlto_module_get_object_file(thinlto_code_gen_t cg, int index) returns BytePointer;
//public extern function thinlto_codegen_set_pic_model(thinlto_code_gen_t cg, int arg1) returns boolean;
//public extern function thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t cg, BytePointer save_temps_dir);
//public extern function thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t cg, string save_temps_dir);
//public extern function thinlto_set_generated_objects_dir(thinlto_code_gen_t cg, string save_temps_dir);
//public extern function thinlto_set_generated_objects_dir(thinlto_code_gen_t cg, BytePointer save_temps_dir);
//public extern function thinlto_codegen_set_cpu(thinlto_code_gen_t cg, BytePointer cpu);
//public extern function thinlto_codegen_set_cpu(thinlto_code_gen_t cg, string cpu);
//public extern function thinlto_codegen_disable_codegen(thinlto_code_gen_t cg, boolean disable);
//public extern function thinlto_codegen_set_codegen_only(thinlto_code_gen_t cg, boolean codegen_only);
//public extern function thinlto_debug_options(ByteBuffer options, int number);
//public extern function thinlto_debug_options(byte[] options, int number);
//public extern function thinlto_debug_options(PointerPointer options, int number);
//public extern function thinlto_debug_options(BytePointer options, int number);
//public extern function lto_module_is_thinlto(lto_module_t mod) returns boolean;
//public extern function thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t cg, BytePointer name, int length);
//public extern function thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t cg, string name, int length);
//public extern function thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t cg, string name, int length);
//public extern function thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t cg, BytePointer name, int length);
//public extern function thinlto_codegen_set_cache_dir(thinlto_code_gen_t cg, BytePointer cache_dir);
//public extern function thinlto_codegen_set_cache_dir(thinlto_code_gen_t cg, string cache_dir);
//public extern function thinlto_codegen_set_cache_pruning_interval(thinlto_code_gen_t cg, int interval);
//public extern function thinlto_codegen_set_final_cache_size_relative_to_available_space(thinlto_code_gen_t cg, int percentage);
//public extern function thinlto_codegen_set_cache_entry_expiration(thinlto_code_gen_t cg, int expiration);
public extern function LLVMCreateObjectFile(LLVMMemoryBufferRef memBuf) returns LLVMObjectFileRef;
public extern function LLVMDisposeObjectFile(LLVMObjectFileRef objectFile);
public extern function LLVMGetSections(LLVMObjectFileRef objectFile) returns LLVMSectionIteratorRef;
public extern function LLVMDisposeSectionIterator(LLVMSectionIteratorRef si);
public extern function LLVMIsSectionIteratorAtEnd(LLVMObjectFileRef objectFile, LLVMSectionIteratorRef si) returns int;
public extern function LLVMMoveToNextSection(LLVMSectionIteratorRef si);
public extern function LLVMMoveToContainingSection(LLVMSectionIteratorRef sect, LLVMSymbolIteratorRef sym);
public extern function LLVMGetSymbols(LLVMObjectFileRef objectFile) returns LLVMSymbolIteratorRef;
public extern function LLVMDisposeSymbolIterator(LLVMSymbolIteratorRef si);
public extern function LLVMIsSymbolIteratorAtEnd(LLVMObjectFileRef objectFile, LLVMSymbolIteratorRef si) returns int;
public extern function LLVMMoveToNextSymbol(LLVMSymbolIteratorRef si);
public extern function LLVMGetSectionName(LLVMSectionIteratorRef si) returns BytePointer;
public extern function LLVMGetSectionSize(LLVMSectionIteratorRef si) returns int;
public extern function LLVMGetSectionContents(LLVMSectionIteratorRef si) returns BytePointer;
public extern function LLVMGetSectionAddress(LLVMSectionIteratorRef si) returns int;
public extern function LLVMGetSectionContainsSymbol(LLVMSectionIteratorRef si, LLVMSymbolIteratorRef sym) returns int;
public extern function LLVMGetRelocations(LLVMSectionIteratorRef section) returns LLVMRelocationIteratorRef;
public extern function LLVMDisposeRelocationIterator(LLVMRelocationIteratorRef ri);
public extern function LLVMIsRelocationIteratorAtEnd(LLVMSectionIteratorRef section, LLVMRelocationIteratorRef ri) returns int;
public extern function LLVMMoveToNextRelocation(LLVMRelocationIteratorRef ri);
public extern function LLVMGetSymbolName(LLVMSymbolIteratorRef si) returns BytePointer;
public extern function LLVMGetSymbolAddress(LLVMSymbolIteratorRef si) returns int;
public extern function LLVMGetSymbolSize(LLVMSymbolIteratorRef si) returns int;
public extern function LLVMGetRelocationOffset(LLVMRelocationIteratorRef ri) returns int;
public extern function LLVMGetRelocationSymbol(LLVMRelocationIteratorRef ri) returns LLVMSymbolIteratorRef;
public extern function LLVMGetRelocationType(LLVMRelocationIteratorRef ri) returns int;
public extern function LLVMGetRelocationTypeName(LLVMRelocationIteratorRef ri) returns BytePointer;
public extern function LLVMGetRelocationValueString(LLVMRelocationIteratorRef ri) returns BytePointer;
public extern function LLVMInitializeAllTargetInfos();
public extern function LLVMInitializeAllTargets();
public extern function LLVMInitializeAllTargetMCs();
public extern function LLVMInitializeAllAsmPrinters();
public extern function LLVMInitializeAllAsmParsers();
public extern function LLVMInitializeAllDisassemblers();
public extern function LLVMInitializeNativeTarget() returns int;
public extern function LLVMInitializeNativeAsmParser() returns int;
public extern function LLVMInitializeNativeAsmPrinter() returns int;
public extern function LLVMInitializeNativeDisassembler() returns int;
public extern function LLVMGetModuleDataLayout(LLVMModuleRef m) returns LLVMTargetDataRef;
public extern function LLVMSetModuleDataLayout(LLVMModuleRef m, LLVMTargetDataRef dl);
//public extern function LLVMCreateTargetData(BytePointer stringRep) returns LLVMTargetDataRef;
public extern function LLVMCreateTargetData(string stringRep) returns LLVMTargetDataRef;
public extern function LLVMDisposeTargetData(LLVMTargetDataRef td);
public extern function LLVMAddTargetLibraryInfo(LLVMTargetLibraryInfoRef tli, LLVMPassManagerRef pm);
public extern function LLVMCopyStringRepOfTargetData(LLVMTargetDataRef td) returns BytePointer;
public extern function LLVMByteOrder(LLVMTargetDataRef td) returns int;
public extern function LLVMPointerSize(LLVMTargetDataRef td) returns int;
public extern function LLVMPointerSizeForAS(LLVMTargetDataRef td, int asValue) returns int;
public extern function LLVMIntPtrType(LLVMTargetDataRef td) returns LLVMTypeRef;
public extern function LLVMIntPtrTypeForAS(LLVMTargetDataRef td, int asValue) returns LLVMTypeRef;
public extern function LLVMIntPtrTypeInContext(LLVMContextRef c, LLVMTargetDataRef td) returns LLVMTypeRef;
public extern function LLVMIntPtrTypeForASInContext(LLVMContextRef c, LLVMTargetDataRef td, int asValue) returns LLVMTypeRef;
public extern function LLVMSizeOfTypeInBits(LLVMTargetDataRef td, LLVMTypeRef ty) returns int;
public extern function LLVMStoreSizeOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int;
public extern function LLVMABISizeOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int;
public extern function LLVMABIAlignmentOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int;
public extern function LLVMCallFrameAlignmentOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int;
public extern function LLVMPreferredAlignmentOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int;
public extern function LLVMPreferredAlignmentOfGlobal(LLVMTargetDataRef td, LLVMValueRef globalVar) returns int;
public extern function LLVMElementAtOffset(LLVMTargetDataRef td, LLVMTypeRef structTy, int offset) returns int;
public extern function LLVMOffsetOfElement(LLVMTargetDataRef td, LLVMTypeRef structTy, int element) returns int;
public extern function LLVMGetFirstTarget() returns LLVMTargetRef;
public extern function LLVMGetNextTarget(LLVMTargetRef t) returns LLVMTargetRef;
//public extern function LLVMGetTargetFromName(BytePointer name) returns LLVMTargetRef;
public extern function LLVMGetTargetFromName(string name) returns LLVMTargetRef;
//public extern function LLVMGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, byte[] errorMessage) returns int;
//public extern function LLVMGetTargetFromTriple(string triple, PointerPointer t, BytePointer errorMessage) returns int;
//public extern function LLVMGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, ByteBuffer errorMessage) returns int;
//public extern function LLVMGetTargetFromTriple(string triple, PointerPointer t, byte[] errorMessage) returns int;
//public extern function LLVMGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, PointerPointer errorMessage) returns int;
//public extern function LLVMGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, BytePointer errorMessage) returns int;
//public extern function LLVMGetTargetFromTriple(string triple, PointerPointer t, ByteBuffer errorMessage) returns int;
public extern function LLVMGetTargetName(LLVMTargetRef t) returns BytePointer;
public extern function LLVMGetTargetDescription(LLVMTargetRef t) returns BytePointer;
public extern function LLVMTargetHasJIT(LLVMTargetRef t) returns int;
public extern function LLVMTargetHasTargetMachine(LLVMTargetRef t) returns int;
public extern function LLVMTargetHasAsmBackend(LLVMTargetRef t) returns int;
//public extern function LLVMCreateTargetMachine(LLVMTargetRef t, string triple, string cpu, string features, int level, int reloc, int codeModel) returns LLVMTargetMachineRef;
public extern function LLVMCreateTargetMachine(LLVMTargetRef t, BytePointer triple, BytePointer cpu, BytePointer features, int level, int reloc, int codeModel) returns LLVMTargetMachineRef;
public extern function LLVMDisposeTargetMachine(LLVMTargetMachineRef t);
public extern function LLVMGetTargetMachineTarget(LLVMTargetMachineRef t) returns LLVMTargetRef;
public extern function LLVMGetTargetMachineTriple(LLVMTargetMachineRef t) returns BytePointer;
public extern function LLVMGetTargetMachineCPU(LLVMTargetMachineRef t) returns BytePointer;
public extern function LLVMGetTargetMachineFeatureString(LLVMTargetMachineRef t) returns BytePointer;
public extern function LLVMCreateTargetDataLayout(LLVMTargetMachineRef t) returns LLVMTargetDataRef;
public extern function LLVMSetTargetMachineAsmVerbosity(LLVMTargetMachineRef t, int verboseAsm);
//public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, BytePointer filename, int codegen, BytePointer errorMessage) returns int;
public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, byte[] filename, int codegen, byte[] errorMessage) returns int;
//public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, ByteBuffer filename, int codegen, ByteBuffer errorMessage) returns int;
//public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, BytePointer filename, int codegen, PointerPointer errorMessage) returns int;
//public extern function LLVMTargetMachineEmitToMemoryBuffer0(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, byte[] errorMessage, LLVMMemoryBufferRef outMemBuf) returns int;
//public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, BytePointer errorMessage, PointerPointer outMemBuf) returns int;
//public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, ByteBuffer errorMessage, LLVMMemoryBufferRef outMemBuf) returns int;
//public extern function LLVMTargetMachineEmitToMemoryBuffer1(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, byte[] errorMessage, PointerPointer outMemBuf) returns int;
public extern function LLVMTargetMachineEmitToMemoryBuffer2(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, PointerPointer errorMessage, LLVMMemoryBufferRef outMemBuf) returns int;
//public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, BytePointer errorMessage, LLVMMemoryBufferRef outMemBuf) returns int;
//public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, ByteBuffer errorMessage, PointerPointer outMemBuf) returns int;
public extern function LLVMGetDefaultTargetTriple() returns BytePointer;
public extern function LLVMAddAnalysisPasses(LLVMTargetMachineRef t, LLVMPassManagerRef pm);
public extern function LLVMLinkInMCJIT();
public extern function LLVMLinkInInterpreter();
public extern function LLVMCreateGenericValueOfInt(LLVMTypeRef ty, int n, int isSigned) returns LLVMGenericValueRef;
public extern function LLVMCreateGenericValueOfPointer(Pointer p) returns LLVMGenericValueRef;
//public extern function LLVMCreateGenericValueOfFloat(LLVMTypeRef ty, double n) returns LLVMGenericValueRef;
public extern function LLVMGenericValueIntWidth(LLVMGenericValueRef genValRef) returns int;
public extern function LLVMGenericValueToInt(LLVMGenericValueRef genVal, int isSigned) returns int;
public extern function LLVMGenericValueToPointer(LLVMGenericValueRef genVal) returns Pointer;
//public extern function LLVMGenericValueToFloat(LLVMTypeRef tyRef, LLVMGenericValueRef genVal) returns double;
public extern function LLVMDisposeGenericValue(LLVMGenericValueRef genVal);
//public extern function LLVMCreateExecutionEngineForModule0(LLVMExecutionEngineRef outEE, LLVMModuleRef m, byte[] outError) returns int;
//public extern function LLVMCreateExecutionEngineForModule(PointerPointer outEE, LLVMModuleRef m, ByteBuffer outError) returns int;
//public extern function LLVMCreateExecutionEngineForModule(PointerPointer outEE, LLVMModuleRef m, BytePointer outError) returns int;
//public extern function LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef outEE, LLVMModuleRef m, ByteBuffer outError) returns int;
//public extern function LLVMCreateExecutionEngineForModule1(PointerPointer outEE, LLVMModuleRef m, byte[] outError) returns int;
public extern function LLVMCreateExecutionEngineForModule2(LLVMExecutionEngineRef outEE, LLVMModuleRef m, PointerPointer outError) returns int;
//public extern function LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef outEE, LLVMModuleRef m, BytePointer outError) returns int;
//public extern function LLVMCreateInterpreterForModule0(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, byte[] outError) returns int;
//public extern function LLVMCreateInterpreterForModule(PointerPointer outInterp, LLVMModuleRef m, BytePointer outError) returns int;
//public extern function LLVMCreateInterpreterForModule(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, ByteBuffer outError) returns int;
//public extern function LLVMCreateInterpreterForModule1(PointerPointer outInterp, LLVMModuleRef m, byte[] outError) returns int;
public extern function LLVMCreateInterpreterForModule2(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, PointerPointer outError) returns int;
//public extern function LLVMCreateInterpreterForModule(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, BytePointer outError) returns int;
//public extern function LLVMCreateInterpreterForModule(PointerPointer outInterp, LLVMModuleRef m, ByteBuffer outError) returns int;
//public extern function LLVMCreateJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, int optLevel, BytePointer outError) returns int;
//public extern function LLVMCreateJITCompilerForModule0(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, byte[] outError) returns int;
//public extern function LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, ByteBuffer outError) returns int;
//public extern function LLVMCreateJITCompilerForModule1(PointerPointer outJIT, LLVMModuleRef m, int optLevel, byte[] outError) returns int;
public extern function LLVMCreateJITCompilerForModule2(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, PointerPointer outError) returns int;
//public extern function LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, BytePointer outError) returns int;
//public extern function LLVMCreateJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, int optLevel, ByteBuffer outError) returns int;
public extern function LLVMInitializeMCJITCompilerOptions(LLVMMCJITCompilerOptions options, int sizeOfOptions);
//public extern function LLVMCreateMCJITCompilerForModule0(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, byte[] outError) returns int;
//public extern function LLVMCreateMCJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, BytePointer outError) returns int;
//public extern function LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, ByteBuffer outError) returns int;
//public extern function LLVMCreateMCJITCompilerForModule1(PointerPointer outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, byte[] outError) returns int;
public extern function LLVMCreateMCJITCompilerForModule2(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, PointerPointer outError) returns int;
//public extern function LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, BytePointer outError) returns int;
//public extern function LLVMCreateMCJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, ByteBuffer outError) returns int;
public extern function LLVMDisposeExecutionEngine(LLVMExecutionEngineRef ee);
public extern function LLVMRunStaticConstructors(LLVMExecutionEngineRef ee);
public extern function LLVMRunStaticDestructors(LLVMExecutionEngineRef ee);
//public extern function LLVMRunFunctionAsMain(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, ByteBuffer argV, ByteBuffer envP) returns int;
//public extern function LLVMRunFunctionAsMain(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, BytePointer argV, BytePointer envP) returns int;
//public extern function LLVMRunFunctionAsMain0(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, byte[] argV, byte[] envP) returns int;
public extern function LLVMRunFunctionAsMain1(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, PointerPointer argV, PointerPointer envP) returns int;
public extern function LLVMRunFunction0(LLVMExecutionEngineRef ee, LLVMValueRef f, int numArgs, PointerPointer args) returns LLVMGenericValueRef;
public extern function LLVMRunFunction1(LLVMExecutionEngineRef ee, LLVMValueRef f, int numArgs, LLVMGenericValueRef args) returns LLVMGenericValueRef;
public extern function LLVMFreeMachineCodeForFunction(LLVMExecutionEngineRef ee, LLVMValueRef f);
public extern function LLVMAddModule(LLVMExecutionEngineRef ee, LLVMModuleRef m);
//public extern function LLVMRemoveModule0(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, byte[] outError) returns int;
//public extern function LLVMRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, PointerPointer outMod, BytePointer outError) returns int;
//public extern function LLVMRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, ByteBuffer outError) returns int;
//public extern function LLVMRemoveModule1(LLVMExecutionEngineRef ee, LLVMModuleRef m, PointerPointer outMod, byte[] outError) returns int;
public extern function LLVMRemoveModule2(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, PointerPointer outError) returns int;
//public extern function LLVMRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, BytePointer outError) returns int;
//public extern function LLVMRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, PointerPointer outMod, ByteBuffer outError) returns int;
public extern function LLVMFindFunction(LLVMExecutionEngineRef ee, string name, PointerPointer outFn) returns int;
//public extern function LLVMFindFunction(LLVMExecutionEngineRef ee, BytePointer name, LLVMValueRef outFn) returns int;
public extern function LLVMRecompileAndRelinkFunction(LLVMExecutionEngineRef ee, LLVMValueRef fn) returns Pointer;
public extern function LLVMGetExecutionEngineTargetData(LLVMExecutionEngineRef ee) returns LLVMTargetDataRef;
public extern function LLVMGetExecutionEngineTargetMachine(LLVMExecutionEngineRef ee) returns LLVMTargetMachineRef;
public extern function LLVMAddGlobalMapping(LLVMExecutionEngineRef ee, LLVMValueRef global, Pointer addr);
public extern function LLVMGetPointerToGlobal(LLVMExecutionEngineRef ee, LLVMValueRef global) returns Pointer;
//public extern function LLVMGetGlobalValueAddress(LLVMExecutionEngineRef ee, BytePointer name) returns int;
public extern function LLVMGetGlobalValueAddress(LLVMExecutionEngineRef ee, string name) returns int;
public extern function LLVMGetFunctionAddress(LLVMExecutionEngineRef ee, string name) returns int;
//public extern function LLVMGetFunctionAddress(LLVMExecutionEngineRef ee, BytePointer name) returns int;
public extern function LLVMCreateSimpleMCJITMemoryManager(Pointer opaque, LLVMMemoryManagerAllocateCodeSectionCallback allocateCodeSection, LLVMMemoryManagerAllocateDataSectionCallback allocateDataSection, LLVMMemoryManagerFinalizeMemoryCallback finalizeMemory, LLVMMemoryManagerDestroyCallback destroy) returns LLVMMCJITMemoryManagerRef;
public extern function LLVMDisposeMCJITMemoryManager(LLVMMCJITMemoryManagerRef mm);
public extern function LLVMAddArgumentPromotionPass(LLVMPassManagerRef pm);
public extern function LLVMAddConstantMergePass(LLVMPassManagerRef pm);
public extern function LLVMAddCalledValuePropagationPass(LLVMPassManagerRef pm);
public extern function LLVMAddDeadArgEliminationPass(LLVMPassManagerRef pm);
public extern function LLVMAddFunctionAttrsPass(LLVMPassManagerRef pm);
public extern function LLVMAddFunctionInliningPass(LLVMPassManagerRef pm);
public extern function LLVMAddAlwaysInlinerPass(LLVMPassManagerRef pm);
public extern function LLVMAddGlobalDCEPass(LLVMPassManagerRef pm);
public extern function LLVMAddGlobalOptimizerPass(LLVMPassManagerRef pm);
public extern function LLVMAddIPConstantPropagationPass(LLVMPassManagerRef pm);
public extern function LLVMAddPruneEHPass(LLVMPassManagerRef pm);
public extern function LLVMAddIPSCCPPass(LLVMPassManagerRef pm);
public extern function LLVMAddInternalizePass(LLVMPassManagerRef arg0, int allButMain);
public extern function LLVMAddStripDeadPrototypesPass(LLVMPassManagerRef pm);
public extern function LLVMAddStripSymbolsPass(LLVMPassManagerRef pm);
public extern function LLVMPassManagerBuilderCreate() returns LLVMPassManagerBuilderRef;
public extern function LLVMPassManagerBuilderDispose(LLVMPassManagerBuilderRef pmb);
public extern function LLVMPassManagerBuilderSetOptLevel(LLVMPassManagerBuilderRef pmb, int optLevel);
public extern function LLVMPassManagerBuilderSetSizeLevel(LLVMPassManagerBuilderRef pmb, int sizeLevel);
public extern function LLVMPassManagerBuilderSetDisableUnitAtATime(LLVMPassManagerBuilderRef pmb, int value);
public extern function LLVMPassManagerBuilderSetDisableUnrollLoops(LLVMPassManagerBuilderRef pmb, int value);
public extern function LLVMPassManagerBuilderSetDisableSimplifyLibCalls(LLVMPassManagerBuilderRef pmb, int value);
public extern function LLVMPassManagerBuilderUseInlinerWithThreshold(LLVMPassManagerBuilderRef pmb, int threshold);
public extern function LLVMPassManagerBuilderPopulateFunctionPassManager(LLVMPassManagerBuilderRef pmb, LLVMPassManagerRef pm);
public extern function LLVMPassManagerBuilderPopulateModulePassManager(LLVMPassManagerBuilderRef pmb, LLVMPassManagerRef pm);
public extern function LLVMPassManagerBuilderPopulateLTOPassManager(LLVMPassManagerBuilderRef pmb, LLVMPassManagerRef pm, int internalize, int runInliner);
public extern function LLVMAddAggressiveDCEPass(LLVMPassManagerRef pm);
public extern function LLVMAddBitTrackingDCEPass(LLVMPassManagerRef pm);
public extern function LLVMAddAlignmentFromAssumptionsPass(LLVMPassManagerRef pm);
public extern function LLVMAddCFGSimplificationPass(LLVMPassManagerRef pm);
public extern function LLVMAddDeadStoreEliminationPass(LLVMPassManagerRef pm);
public extern function LLVMAddScalarizerPass(LLVMPassManagerRef pm);
public extern function LLVMAddMergedLoadStoreMotionPass(LLVMPassManagerRef pm);
public extern function LLVMAddGVNPass(LLVMPassManagerRef pm);
public extern function LLVMAddNewGVNPass(LLVMPassManagerRef pm);
public extern function LLVMAddIndVarSimplifyPass(LLVMPassManagerRef pm);
public extern function LLVMAddInstructionCombiningPass(LLVMPassManagerRef pm);
public extern function LLVMAddJumpThreadingPass(LLVMPassManagerRef pm);
public extern function LLVMAddLICMPass(LLVMPassManagerRef pm);
public extern function LLVMAddLoopDeletionPass(LLVMPassManagerRef pm);
public extern function LLVMAddLoopIdiomPass(LLVMPassManagerRef pm);
public extern function LLVMAddLoopRotatePass(LLVMPassManagerRef pm);
public extern function LLVMAddLoopRerollPass(LLVMPassManagerRef pm);
public extern function LLVMAddLoopUnrollPass(LLVMPassManagerRef pm);
public extern function LLVMAddLoopUnswitchPass(LLVMPassManagerRef pm);
public extern function LLVMAddMemCpyOptPass(LLVMPassManagerRef pm);
public extern function LLVMAddPartiallyInlineLibCallsPass(LLVMPassManagerRef pm);
public extern function LLVMAddLowerSwitchPass(LLVMPassManagerRef pm);
public extern function LLVMAddPromoteMemoryToRegisterPass(LLVMPassManagerRef pm);
public extern function LLVMAddReassociatePass(LLVMPassManagerRef pm);
public extern function LLVMAddSCCPPass(LLVMPassManagerRef pm);
public extern function LLVMAddScalarReplAggregatesPass(LLVMPassManagerRef pm);
public extern function LLVMAddScalarReplAggregatesPassSSA(LLVMPassManagerRef pm);
public extern function LLVMAddScalarReplAggregatesPassWithThreshold(LLVMPassManagerRef pm, int threshold);
public extern function LLVMAddSimplifyLibCallsPass(LLVMPassManagerRef pm);
public extern function LLVMAddTailCallEliminationPass(LLVMPassManagerRef pm);
public extern function LLVMAddConstantPropagationPass(LLVMPassManagerRef pm);
public extern function LLVMAddDemoteMemoryToRegisterPass(LLVMPassManagerRef pm);
public extern function LLVMAddVerifierPass(LLVMPassManagerRef pm);
public extern function LLVMAddCorrelatedValuePropagationPass(LLVMPassManagerRef pm);
public extern function LLVMAddEarlyCSEPass(LLVMPassManagerRef pm);
public extern function LLVMAddEarlyCSEMemSSAPass(LLVMPassManagerRef pm);
public extern function LLVMAddLowerExpectIntrinsicPass(LLVMPassManagerRef pm);
public extern function LLVMAddTypeBasedAliasAnalysisPass(LLVMPassManagerRef pm);
public extern function LLVMAddScopedNoAliasAAPass(LLVMPassManagerRef pm);
public extern function LLVMAddBasicAliasAnalysisPass(LLVMPassManagerRef pm);
public extern function LLVMAddBBVectorizePass(LLVMPassManagerRef pm);
public extern function LLVMAddLoopVectorizePass(LLVMPassManagerRef pm);
public extern function LLVMAddSLPVectorizePass(LLVMPassManagerRef pm);
