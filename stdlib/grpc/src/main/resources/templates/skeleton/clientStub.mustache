{{#if stubList}}import ballerina/grpc;
import ballerina/io;
{{/if}}{{#stubList}}
public type {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Stub object {
    public grpc:Client clientEndpoint;
    public grpc:Stub stub;

    function initStub (grpc:Client ep) {
        grpc:Stub navStub = new;
        navStub.initStub(ep, "{{stubType}}", DESCRIPTOR_KEY, descriptorMap);
        self.stub = navStub;
    }
    {{#blockingFunctions}}
    function {{methodName}} ({{#if inputType}}{{inputType}} req, {{/if}}grpc:Headers? headers = ()) returns ({{#if outputType}}({{outputType}}, grpc:Headers){{else}}grpc:Headers{{/if}}|error) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        var unionResp = self.stub.blockingExecute("{{methodId}}", req, headers = headers);
        match unionResp {
            error payloadError => {
                return payloadError;
            }
            (any, grpc:Headers) payload => {
                grpc:Headers resHeaders;
                {{#if outputType}}any result;
                (result, resHeaders) = payload;
                return ({{#not_equal outputType "string"}}check {{/not_equal}}<{{outputType}}>result, resHeaders);{{else}}(_, resHeaders) = payload;
                return resHeaders;{{/if}}
            }
        }
    }
    {{/blockingFunctions}}{{#nonBlockingFunctions}}
    function {{methodName}} ({{#if inputType}}{{inputType}} req, {{/if}}typedesc listener, grpc:Headers? headers = ()) returns (error?) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        return self.stub.nonBlockingExecute("{{methodId}}", req, listener, headers = headers);
    }
    {{/nonBlockingFunctions}}{{#streamingFunctions}}
    function {{methodName}} (typedesc listener, grpc:Headers? headers = ()) returns (grpc:Client| error)  {
        var res = self.stub.streamingExecute("{{methodId}}", listener, headers = headers);
        match res {
            error err => {
                return err;
            }
            grpc:Client con => {
                return con;
            }
        }
    }{{/streamingFunctions}}
};
{{/stubList}}
{{#stubList}}
public type {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Client object {
    public grpc:Client client;
    public {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Stub stub;

    public function init (grpc:ClientEndpointConfig config) {
        // initialize client endpoint.
        grpc:Client c = new;
        c.init(config);
        self.client = c;
        // initialize service stub.
        {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Stub s = new;
        s.initStub(c);
        self.stub = s;
    }

    public function getCallerActions () returns {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Stub {
        return self.stub;
    }
};
{{/stubList}}
{{#messageList}}
type {{messageName}} record {
    {{#fieldList}}{{fieldType}}{{fieldLabel}} {{fieldName}}{{#if defaultValue}} = {{defaultValue}}{{/if}};
    {{/fieldList}}
};
{{/messageList}}
{{#enumList}}public type {{messageName}} {{#fieldList}}"{{name}}"{{#unless @last}}|{{/unless}}{{/fieldList}};
{{#fieldList}}
@final public {{../messageName}} {{name}} = "{{name}}";
{{/fieldList}}{{/enumList}}
@final string DESCRIPTOR_KEY = "{{rootDescriptorKey}}";
map descriptorMap = {
{{#each descriptors}}"{{descriptorKey}}":"{{descriptorData}}"{{#unless @last}},{{/unless}}
{{/each}}
};